{
  "spec": {
    "openapi": "3.0.0",
    "info": {
      "title": "Axonaut",
      "contact": {
        "email": "support@axonaut.com"
      },
      "version": "2.0.0"
    },
    "servers": [
      {
        "url": "https://axonaut.com"
      }
    ],
    "paths": {
      "/api/v2/companies": {
        "get": {
          "tags": [
            "Companies"
          ],
          "operationId": "get_aaa_api_v2_companies_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "search",
              "in": "query",
              "description": "Filters Companies whose name contains the specified character string",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "internal_id",
              "in": "query",
              "description": "Search for the Company whose internal id is the specified character string",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "type",
              "in": "query",
              "description": "Filters the Company type",
              "schema": {
                "type": "string",
                "default": "all",
                "enum": [
                  "customer",
                  "prospect",
                  "supplier",
                  "all"
                ]
              }
            },
            {
              "name": "siret",
              "in": "query",
              "description": "Filters the SIRET identifier of the Company",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "address_city",
              "in": "query",
              "description": "Filters the city of the Company",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "address_zipcode",
              "in": "query",
              "description": "Filters the zip code of the Company",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "is_prospect",
              "in": "query",
              "description": "Filters all prospects (true or false)",
              "schema": {
                "type": "string",
                "enum": [
                  "true",
                  "false"
                ]
              }
            },
            {
              "name": "is_customer",
              "in": "query",
              "description": "Filters all customers (true or false)",
              "schema": {
                "type": "string",
                "enum": [
                  "true",
                  "false"
                ]
              }
            },
            {
              "name": "is_supplier",
              "in": "query",
              "description": "Filters all suppliers (true or false)",
              "schema": {
                "type": "string",
                "enum": [
                  "true",
                  "false"
                ]
              }
            },
            {
              "name": "sort",
              "in": "query",
              "description": "Order of the returned data",
              "schema": {
                "type": "string",
                "default": "id",
                "enum": [
                  "id",
                  "name",
                  "address_city"
                ]
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/company.get"
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Companies"
          ],
          "summary": "Create a Company",
          "operationId": "post_api_v2_company_post",
          "requestBody": {
            "description": "The new Company. <br/> <br/>\n     *     If the company is a B2C company, you need to set the parameter 'isB2C' to true and provide one employee in the field 'employees'. The company name will be overwritten by the concatenation of the 'firstname' and the 'lastname' of the employee.<br/>\n     *     'employees' array is used only if 'isB2C' is set to true. If you need to add Employees to a Company, please use POST /employees.<br/>\n     *     Currency must be a 3 letters code : https://fr.iban.com/currency-codes (ISO 4217)",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/company.post"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/company.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/quotations": {
        "get": {
          "tags": [
            "Quotations"
          ],
          "operationId": "get_aaa_api_v2_quotations_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "sort",
              "in": "query",
              "description": "Order of the returned data",
              "schema": {
                "type": "string",
                "default": "id",
                "enum": [
                  "id",
                  "updatetime"
                ]
              }
            },
            {
              "name": "status",
              "in": "query",
              "description": "Filters the Quotations status",
              "schema": {
                "type": "string",
                "default": "all",
                "enum": [
                  "accepted",
                  "refused",
                  "pending",
                  "all"
                ]
              }
            },
            {
              "name": "date_before",
              "in": "query",
              "description": "Quotation date prior to the given date (format YYYY-MM-DD)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "date_after",
              "in": "query",
              "description": "Quotation date after the given date (format YYYY-MM-DD)",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/quotation.get"
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Quotations"
          ],
          "summary": "Create a Quotation",
          "operationId": "post_api_v2_quotations_create",
          "requestBody": {
            "description": "The new Quotation.<br/>If the properties product.id and product.internal_id are empty or missing, a new Product will be created.<br/>Dates must be in RFC3339 format.",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quotation.post"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/quotation.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/events": {
        "get": {
          "tags": [
            "Events"
          ],
          "operationId": "get_aaa_api_v2_events_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "date[inf]",
              "in": "query",
              "description": "get event before date",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "date[sup]",
              "in": "query",
              "description": "get event after date",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "date[eq]",
              "in": "query",
              "description": "get event with date",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "date[neq]",
              "in": "query",
              "description": "get event with date different",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "orders[date]",
              "in": "query",
              "description": "order by event date. Allow 'asc' and 'desc' values",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "orders[creationDate]",
              "in": "query",
              "description": "order by creation date. Allow 'asc' and 'desc' values",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/event.get"
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Events"
          ],
          "summary": "Create an Event",
          "operationId": "post_api_v2_event_post",
          "requestBody": {
            "description": "The new Event<br/>nature property : 1 = Meeting, 2 = Email, 3 = Phone call, 4 = Mail, 5 = Text message, 6 = Note<br/>duration property in minutes</br>Warning : attachments available only for emails (nature = 2)",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event.post"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/event.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/me": {
        "get": {
          "tags": [
            "Account"
          ],
          "operationId": "get_aaa_api_v2_users_me",
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "email": {
                        "type": "string"
                      },
                      "fullname": {
                        "type": "string"
                      },
                      "firstname": {
                        "type": "string"
                      },
                      "lastname": {
                        "type": "string"
                      },
                      "phone_number": {
                        "type": "string"
                      },
                      "cellphone_number": {
                        "type": "string"
                      },
                      "company_natures": {
                        "type": "string"
                      },
                      "roles": {
                        "type": "string"
                      },
                      "user_api_key": {
                        "type": "string"
                      },
                      "api_time_consumed": {
                        "type": "integer"
                      },
                      "account": {
                        "type": "array",
                        "items": {
                          "properties": {
                            "id": {
                              "type": "integer"
                            },
                            "company_name": {
                              "type": "string"
                            },
                            "company_address_street": {
                              "type": "string"
                            },
                            "company_address_zipcode": {
                              "type": "string"
                            },
                            "company_address_city": {
                              "type": "string"
                            },
                            "company_address_country": {
                              "type": "string"
                            },
                            "company_phone": {
                              "type": "string"
                            },
                            "company_siret": {
                              "type": "string"
                            },
                            "currency": {
                              "type": "string"
                            },
                            "account_status": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/companies/{companyId}": {
        "get": {
          "tags": [
            "Companies"
          ],
          "summary": "Get a specific Company",
          "operationId": "get_api_v2_company_get",
          "parameters": [
            {
              "name": "companyId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/company.get"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Companies"
          ],
          "summary": "Delete a Company",
          "operationId": "delete_api_v2_company_delete",
          "parameters": [
            {
              "name": "companyId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "description": "Accepted"
            }
          }
        },
        "patch": {
          "tags": [
            "Companies"
          ],
          "summary": "Update a Company",
          "operationId": "patch_api_v2_company_patch",
          "parameters": [
            {
              "name": "companyId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "The new Company. <br/>Currency must be a 3 letters code : https://fr.iban.com/currency-codes (ISO 4217)",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/company.patch"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/company.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/companies/{companyId}/addresses": {
        "get": {
          "tags": [
            "Address"
          ],
          "summary": "Get all Addresses of a Company",
          "operationId": "get_api_v2_company_addresses_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "companyId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/companyAddress.get"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/addresses": {
        "post": {
          "tags": [
            "Address"
          ],
          "summary": "Create an Address for a Company",
          "operationId": "post_api_v2_company_addresses_post",
          "requestBody": {
            "description": "The new Company. <br/>Currency must be a 3 letters code : https://fr.iban.com/currency-codes (ISO 4217)",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/companyAddress.post"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/companyAddress.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/addresses/{addressId}": {
        "delete": {
          "tags": [
            "Address"
          ],
          "summary": "Delete a Company Address",
          "operationId": "delete_api_v2_company_addresses_delete",
          "parameters": [
            {
              "name": "addressId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          }
        },
        "patch": {
          "tags": [
            "Address"
          ],
          "summary": "Update an Address for a Company",
          "operationId": "patch_api_v2_company_addresses_patch",
          "parameters": [
            {
              "name": "addressId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "The new Company. <br/>Currency must be a 3 letters code : https://fr.iban.com/currency-codes (ISO 4217)",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/companyAddress.patch"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/companyAddress.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/employees": {
        "get": {
          "tags": [
            "Employees"
          ],
          "summary": "Get all Employees",
          "operationId": "get_api_v2_employees_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "email",
              "in": "query",
              "description": "Filters the email of the Employee",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "firstname",
              "in": "query",
              "description": "Filters the firstname of the Employee",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "lastname",
              "in": "query",
              "description": "Filters the lastname of the Employee",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "phone",
              "in": "query",
              "description": "Filters the phone/cellphone of the Employee containing the given character string",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/employee.get"
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Employees"
          ],
          "summary": "Create an Employee",
          "operationId": "post_api_v2_employees_post",
          "requestBody": {
            "description": "The new Employee <br/> Note that it is not allowed to add a new employee to a B2C company",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/employee.post"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/employee.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/companies/{companyId}/employees": {
        "get": {
          "tags": [
            "Employees"
          ],
          "summary": "Get all Employees of a specific Company",
          "operationId": "get_api_v2_company_employees_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "companyId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/employee.get"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/employees/{employeeId}": {
        "get": {
          "tags": [
            "Employees"
          ],
          "summary": "Get a specific Employee",
          "operationId": "get_api_v2_employees_get",
          "parameters": [
            {
              "name": "employeeId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/employee.get"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Employees"
          ],
          "summary": "Delete an Employee",
          "operationId": "delete_api_v2_employees_delete",
          "parameters": [
            {
              "name": "employeeId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          }
        },
        "patch": {
          "tags": [
            "Employees"
          ],
          "summary": "Update an Employee",
          "operationId": "patch_api_v2_employees_patch",
          "parameters": [
            {
              "name": "employeeId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "The new Employee",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/employee.patch"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/employee.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/company-categories": {
        "get": {
          "tags": [
            "Company Category"
          ],
          "summary": "Get all Company Categories",
          "operationId": "get_api_v2_company_categories_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/companyNature.get"
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Company Category"
          ],
          "summary": "Create a Company Category",
          "operationId": "post_api_v2_company_categories_post",
          "requestBody": {
            "description": "The new Company nature.",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/companyNature.post"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/companyNature.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/documents/{documentId}": {
        "get": {
          "tags": [
            "Company document"
          ],
          "summary": "Get a specific Document",
          "operationId": "get_api_v2_document_get",
          "parameters": [
            {
              "name": "documentId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/document.get"
                  }
                }
              }
            }
          }
        },
        "patch": {
          "tags": [
            "Company document"
          ],
          "summary": "Update a Document",
          "operationId": "patch_api_v2_document_patch",
          "parameters": [
            {
              "name": "documentId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/document.patch"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/document.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/companies/{companyId}/documents": {
        "get": {
          "tags": [
            "Company document"
          ],
          "summary": "Get all Documents of a Company",
          "operationId": "get_api_v2_document_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "companyId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/document.get"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/documents": {
        "post": {
          "tags": [
            "Company document"
          ],
          "summary": "Add a Document to a Company (URL only, no file)",
          "operationId": "post_api_v2_document_post",
          "requestBody": {
            "description": "The new Document",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/document.post"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/document.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/documents/{documentId}/download": {
        "get": {
          "tags": [
            "Company document"
          ],
          "summary": "Download a Document",
          "operationId": "get_api_v2_document_download",
          "parameters": [
            {
              "name": "alt",
              "in": "query",
              "description": "If this parameters take the value ?alt=media, downloads the binary file instead of returning the base64",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "documentId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "description": "Base64 content file",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/bank-transactions": {
        "get": {
          "tags": [
            "Bank"
          ],
          "summary": "Get all Bank Transactions",
          "operationId": "get_api_v2_bank_transactions_list",
          "parameters": [
            {
              "name": "created_before",
              "in": "query",
              "description": "Transactions' creation date prior to the given date (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "created_after",
              "in": "query",
              "description": "Transactions' creation date after the given date (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "operation_date_before",
              "in": "query",
              "description": "Transactions' operation date prior to the given date (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "operation_date_after",
              "in": "query",
              "description": "Transactions' operation date after the given date (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "processed_before",
              "in": "query",
              "description": "Transactions' processed date before the given date (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "processed_after",
              "in": "query",
              "description": "Transactions' processed date after the given date (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/bankTransaction.get"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/bank-accounts": {
        "get": {
          "tags": [
            "Bank"
          ],
          "summary": "Get all Bank Accounts",
          "operationId": "get_api_v2_bank_accounts_list",
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/bankAccount.get"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/invoices": {
        "get": {
          "tags": [
            "Sales & Invoices"
          ],
          "summary": "Get all Invoices",
          "operationId": "get_api_v2_invoice_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "number",
              "in": "query",
              "description": "Search for the Invoice which number is the specified character string",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "internal_ref",
              "in": "query",
              "description": "Search for the Invoice which internal reference is the specified character string",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "date_before",
              "in": "query",
              "description": "Invoice date prior to the given date (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "date_after",
              "in": "query",
              "description": "Invoice date after the given date (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "paid_date",
              "in": "query",
              "description": "Invoice date of payment (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "is_paid",
              "in": "query",
              "description": "Filters all paid or unpaid invoices (true or false)",
              "schema": {
                "type": "string",
                "enum": [
                  "true",
                  "false"
                ]
              }
            },
            {
              "name": "updated_before",
              "in": "query",
              "description": "Invoice last updated date prior to the given date (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "updated_after",
              "in": "query",
              "description": "Invoice last updated date after the given date(format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "creation_date_before",
              "in": "query",
              "description": "Invoice creation date prior to the given date (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "creation_date_after",
              "in": "query",
              "description": "Invoice creation date after given date (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/invoice.get"
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Sales & Invoices"
          ],
          "summary": "Create an Invoice",
          "operationId": "post_api_v2_invoice_post",
          "requestBody": {
            "description": "The new Invoice.<br />\n     *          Either fill company_id or employee_email to assign the invoice to a Company. employee_email must be the email of a known Contact within the Company.<br />\n     *          property date has to be posterior to last invoice's date. Default value : date of the request.<br />\n     *          If the properties product.id and product.internal_id are empty or missing, a new Product will be created.",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoice.post"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/invoice.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/companies/{companyId}/invoices": {
        "get": {
          "tags": [
            "Sales & Invoices"
          ],
          "summary": "Get all Invoices of a Company",
          "operationId": "get_api_v2_company_invoice_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "number",
              "in": "query",
              "description": "Search for the Invoice which number is the specified character string",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "internal_ref",
              "in": "query",
              "description": "Search for the Invoice which internal reference is the specified character string",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "date_before",
              "in": "query",
              "description": "Invoice date prior to the given date (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "date_after",
              "in": "query",
              "description": "Invoice date after the given date (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "paid_date",
              "in": "query",
              "description": "Invoice date of payment (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "is_paid",
              "in": "query",
              "description": "Filters all paid or unpaid invoices (true or false)",
              "schema": {
                "type": "string",
                "enum": [
                  "true",
                  "false"
                ]
              }
            },
            {
              "name": "updated_before",
              "in": "query",
              "description": "Invoice last updated date prior to the given date (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "updated_after",
              "in": "query",
              "description": "Invoice last updated date after the given date(format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "creation_date_before",
              "in": "query",
              "description": "Invoice creation date prior to the given date (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "creation_date_after",
              "in": "query",
              "description": "Invoice creation date after given date (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "companyId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/invoice.get"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/invoices/{invoiceId}": {
        "get": {
          "tags": [
            "Sales & Invoices"
          ],
          "summary": "Get a specific Invoice",
          "operationId": "get_api_v2_invoice_get",
          "parameters": [
            {
              "name": "invoiceId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/invoice.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/themes": {
        "get": {
          "tags": [
            "Invoices Theme"
          ],
          "summary": "Get all Themes",
          "operationId": "get_api_v2_account_invoice_parameters_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/themes.get"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/payments": {
        "get": {
          "tags": [
            "Invoice Payments"
          ],
          "summary": "Get all Invoice Payments",
          "operationId": "get_api_v2_invoice_payments_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "company_id",
              "in": "query",
              "description": "Filters payments by Company id",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "invoice_id",
              "in": "query",
              "description": "Filters payments by Invoice id",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "invoice_number",
              "in": "query",
              "description": "Filters payments by Invoice number",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "date_before",
              "in": "query",
              "description": "Invoice payment date prior to the given date (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "date_after",
              "in": "query",
              "description": "Invoice payment date after the given date (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/invoicePayment.get"
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Invoice Payments"
          ],
          "summary": "Create an Invoice Payment",
          "operationId": "post_api_v2_payment_create",
          "requestBody": {
            "description": "The new Payment <br/> nature property : 1 = Debit, 2 = Transfer, 3 = Check, 4 = Credit card, 5 = Cash, 6 = Other",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoicePayment.post"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/invoicePayment.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/contracts": {
        "get": {
          "tags": [
            "Contract"
          ],
          "summary": "Get all Orders",
          "operationId": "get_api_v2_contract_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "id",
              "in": "query",
              "description": "A list of comma-separated contract IDs",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "updated_before",
              "in": "query",
              "description": "Order update date after the given date (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "updated_after",
              "in": "query",
              "description": "Order update date prior to the given date (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/contract.get"
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Contract"
          ],
          "summary": "Create an Order",
          "operationId": "post_api_v2_contract_create",
          "requestBody": {
            "description": "The new Order.<br>Properties start_date, end_date, expected_delivery_date, first_invoice_planned_date must be in RFC3339 format.<br>Property generate_and_send_recurring_invoices : 0 = Do not generate and send invoices ; 1 = Generate and send automatically ; 2 = Generate without sending",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contract.post"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/contract.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/companies/{companyId}/contracts": {
        "get": {
          "tags": [
            "Contract"
          ],
          "summary": "Get all Orders of a Company",
          "operationId": "get_api_v2_company_contract_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "updated_before",
              "in": "query",
              "description": "Order update date after the given date (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "updated_after",
              "in": "query",
              "description": "Order update date prior to the given date (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "companyId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/contract.get"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/contracts/{contractId}": {
        "get": {
          "tags": [
            "Contract"
          ],
          "summary": "Get a specific Order",
          "operationId": "get_api_v2_contract_get",
          "parameters": [
            {
              "name": "contractId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/contract.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/companies/{companyId}/quotations": {
        "get": {
          "tags": [
            "Quotations"
          ],
          "summary": "Get all Quotations of a Company",
          "operationId": "get_api_v2_company_quotation_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "sort",
              "in": "query",
              "description": "Order of the returned data",
              "schema": {
                "type": "string",
                "default": "id",
                "enum": [
                  "id",
                  "updatetime"
                ]
              }
            },
            {
              "name": "status",
              "in": "query",
              "description": "Filters the Quotations status",
              "schema": {
                "type": "string",
                "default": "all",
                "enum": [
                  "accepted",
                  "refused",
                  "pending",
                  "all"
                ]
              }
            },
            {
              "name": "companyId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/quotation.get"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/quotations/{quotationId}": {
        "get": {
          "tags": [
            "Quotations"
          ],
          "summary": "Get a specific Quotation",
          "operationId": "get_api_v2_quotations_get",
          "parameters": [
            {
              "name": "quotationId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/quotation.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/expenses": {
        "get": {
          "tags": [
            "Expenses"
          ],
          "summary": "Get all Expenses",
          "operationId": "get_api_v2_expenses_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "orderby",
              "in": "query",
              "description": "Order of the returned data",
              "schema": {
                "type": "string",
                "default": "id",
                "enum": [
                  "last_update_date",
                  "id"
                ]
              }
            },
            {
              "name": "creation_date_before",
              "in": "query",
              "description": "Expense creation date prior to the given date (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "creation_date_after",
              "in": "query",
              "description": "Expense creation date after given date (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "updated_before",
              "in": "query",
              "description": "Expense last updated date prior to the given date (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "updated_after",
              "in": "query",
              "description": "Expense last updated date after the given date(format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "date_before",
              "in": "query",
              "description": "Expense date prior to the given date (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "date_after",
              "in": "query",
              "description": "Expense date after the given date(format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "is_paid",
              "in": "query",
              "description": "Filters all paid or unpaid expenses (true or false)",
              "schema": {
                "type": "string",
                "enum": [
                  "true",
                  "false"
                ]
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/expense.get"
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Expenses"
          ],
          "summary": "Create an Expense",
          "operationId": "post_api_v2_expenses_create",
          "requestBody": {
            "description": "The new Expense.",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/expense.post"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/expense.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/expenses/{expenseId}": {
        "get": {
          "tags": [
            "Expenses"
          ],
          "summary": "Get a specific Expense",
          "operationId": "get_api_v2_expenses_get",
          "parameters": [
            {
              "name": "expenseId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/expense.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/expense-payments": {
        "get": {
          "tags": [
            "Expense Payments"
          ],
          "summary": "Get all Expense Payments",
          "operationId": "get_api_v2_expense_payments_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "date_before",
              "in": "query",
              "description": "Expense payment date prior to the given date (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "date_after",
              "in": "query",
              "description": "Expense payment date after the given date (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/expensePayment.get"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/expenses/payments": {
        "post": {
          "tags": [
            "Expense Payments"
          ],
          "summary": "Create an Expense Payment",
          "operationId": "post_api_v2_expenses_payments_create",
          "requestBody": {
            "description": "The new Expense Payment <br/> nature property : 1 = Debit, 2 = Transfer, 3 = Check, 4 = Credit card, 5 = Cash, 6 = Other",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/expensePayment.post"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/expensePayment.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/suppliers": {
        "get": {
          "tags": [
            "Suppliers"
          ],
          "summary": "Get all Suppliers",
          "operationId": "get_api_v2_suppliers_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/supplier.get"
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Suppliers"
          ],
          "summary": "Create a Supplier",
          "operationId": "post_api_v2_suppliers_create",
          "requestBody": {
            "description": "The new Supplier",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/supplier.post"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/supplier.minimal"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/suppliers/{supplierId}": {
        "get": {
          "tags": [
            "Suppliers"
          ],
          "summary": "Get a specific Supplier",
          "operationId": "get_api_v2_suppliers_get",
          "parameters": [
            {
              "name": "supplierId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/supplier.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/supplier-contracts": {
        "get": {
          "tags": [
            "Supplier contract"
          ],
          "summary": "Get all Supplier Contracts",
          "operationId": "get_api_v2_suppliers_contract_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "start_date_after",
              "in": "query",
              "description": "Supplier contract start date after the given date (format YYYY-MM-DD)",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/supplierContract.get"
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Supplier contract"
          ],
          "summary": "Create a supplier contract",
          "operationId": "post_api_v2_supplier_contract_post",
          "requestBody": {
            "description": "The required data to create a supplier contract <br /> - 'title' for the supplier contract <br/> - 'supplier_id' the id of the supplier <br/> - 'title' and 'pre_tax_amount' for each expense <br/> <br/>",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/supplierContract.post"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/supplierContract.get"
                    }
                  }
                }
              }
            },
            "204": {
              "description": "It is triggered when no ressources have been updated or when there is no remaining merchandise to be received"
            },
            "404": {
              "description": "It is triggered when the requested supplier is not found"
            }
          }
        }
      },
      "/api/v2/supplier-contracts/{supplierContractId}": {
        "get": {
          "tags": [
            "Supplier contract"
          ],
          "summary": "Get a specific Supplier Contract",
          "operationId": "get_api_v2_suppliers_contract_get",
          "parameters": [
            {
              "name": "supplierContractId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/supplierContract.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/supplier-deliveries": {
        "get": {
          "tags": [
            "Supplier delivery"
          ],
          "summary": "Get all Suppliers deliveries",
          "operationId": "get_api_v2_suppliers_deliveries_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/supplierDelivery.get"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/supplier-deliveries/{supplierDeliveryId}": {
        "get": {
          "tags": [
            "Supplier delivery"
          ],
          "summary": "Get a specific supplier delivery",
          "operationId": "get_api_v2_suppliers_delivery_get",
          "parameters": [
            {
              "name": "supplierDeliveryId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/supplierDelivery.get"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/supplier-deliveries/{supplierDeliveryId}/receipt": {
        "post": {
          "tags": [
            "Supplier delivery"
          ],
          "summary": "Receive merchandise for a specific supplier delivery",
          "operationId": "post_api_v2_suppliers_delivery_receipt_post",
          "parameters": [
            {
              "name": "supplierDeliveryId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "The required data to receive merchandises for a supplier delivery",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/supplierDelivery.post"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/supplierDelivery.get"
                    }
                  }
                }
              }
            },
            "204": {
              "description": "It is triggered when no ressources have been updated or when there is no remaining merchandise to be received"
            },
            "400": {
              "description": "It is triggered when the parameter 'supplierDeliveryId' is not a valid number, when the header 'userApiKey' is missing or when at least one of the quantities you wish to receive is greater than the quantity remaining to be received"
            },
            "404": {
              "description": "It is triggered when the requested supplier delivery or when at least one of the merchandises to be received is not found"
            }
          }
        }
      },
      "/api/v2/supplier-deliveries/{supplierDeliveryId}/receipt/{supplierDeliveryReceiptId}": {
        "delete": {
          "tags": [
            "Supplier delivery"
          ],
          "summary": "Delete a merchandise receipt from a specific supplier delivery",
          "operationId": "delete_api_v2_suppliers_delivery_receipt_delete",
          "parameters": [
            {
              "name": "supplierDeliveryId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "supplierDeliveryReceiptId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "The supplier delivery receipt was deleted successfully"
            },
            "404": {
              "description": "It is triggered when the requested supplier delivery or when the supplier delivery receipt is not found"
            }
          }
        }
      },
      "/api/v2/diverse-operations": {
        "get": {
          "tags": [
            "Diverse operations"
          ],
          "summary": "Get all Diverse Operations",
          "operationId": "get_api_v2_diverseOperation_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/diverseOperation.get"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/diverse-operations/{diverseOperationId}": {
        "get": {
          "tags": [
            "Diverse operations"
          ],
          "summary": "Get a specific Diverse Operation",
          "operationId": "get_api_v2_diverseOperation_get",
          "parameters": [
            {
              "name": "diverseOperationId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/diverseOperation.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/tasks": {
        "get": {
          "tags": [
            "Tasks"
          ],
          "summary": "Get all Tasks",
          "operationId": "get_api_v2_task_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/task.get"
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Tasks"
          ],
          "summary": "Create a Task",
          "operationId": "post_api_v2_task_post",
          "requestBody": {
            "description": "The new task<br />\n     *          Priority values : basse, normale, haute, urgente.",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task.post"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/task.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/tasks/{taskId}": {
        "get": {
          "tags": [
            "Tasks"
          ],
          "summary": "Get a specific Task",
          "operationId": "get_api_v2_task_get",
          "parameters": [
            {
              "name": "taskId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/task.get"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Tasks"
          ],
          "summary": "Delete a task",
          "operationId": "delete_api_v2_task_delete",
          "parameters": [
            {
              "name": "taskId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Accepted"
            }
          }
        }
      },
      "/api/v2/timetrackings": {
        "get": {
          "tags": [
            "Timetrackings"
          ],
          "summary": "Get Timetrackings on all tasks or tickets or a filtered set of tasks or tickets.",
          "operationId": "get_api_v2_timetracking_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "tickets",
              "in": "query",
              "description": "A comma-separated list of ticket identifiers.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "tasks",
              "in": "query",
              "description": "A comma-separated list of task identifiers.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "workforce",
              "in": "query",
              "description": "A workforce identifier.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "ended_before",
              "in": "query",
              "description": "Timetracking ended before the given date. (format DD/MM/YYYY HH:MM:SS)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "started_after",
              "in": "query",
              "description": "Timetracking started after the given date. (format DD/MM/YYYY  HH:MM:SS)",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/timetracking.get"
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Timetrackings"
          ],
          "summary": "Create a Timetracking entry for a project, task, ticket .",
          "description": "..",
          "operationId": "post_api_v2_timetracking_post",
          "requestBody": {
            "description": "The new timetracking",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/timetracking.post"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/timetracking.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/timetrackings/{timetrackingId}": {
        "delete": {
          "tags": [
            "Timetrackings"
          ],
          "summary": "Delete a Timetracking.",
          "operationId": "delete_api_v2_timetracking_delete",
          "parameters": [
            {
              "name": "timetrackingId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/timetracking.get"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/tasks/{taskId}/timetrackings": {
        "get": {
          "tags": [
            "Timetrackings"
          ],
          "summary": "Get Timetrackings on a task.",
          "operationId": "get_api_v2_task_timetracking_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "workforce",
              "in": "query",
              "description": "A workforce identifier.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "ended_before",
              "in": "query",
              "description": "Timetracking ended before the given date. (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "started_after",
              "in": "query",
              "description": "Timetracking started after the given date. (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "weekDate",
              "in": "query",
              "description": "Week date (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "taskId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/timetracking.get"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/tickets/{ticketId}/timetrackings": {
        "get": {
          "tags": [
            "Timetrackings"
          ],
          "summary": "Get Timetrackings on a ticket.",
          "operationId": "get_api_v2_ticket_timetracking_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "workforce",
              "in": "query",
              "description": "A workforce identifier.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "ended_before",
              "in": "query",
              "description": "Timetracking ended before the given date. (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "started_after",
              "in": "query",
              "description": "Timetracking started after the given date. (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "weekDate",
              "in": "query",
              "description": "Week date (format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "ticketId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/timetracking.get"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/taskNatures": {
        "get": {
          "tags": [
            "Tasks Nature"
          ],
          "summary": "Get all TaskNatures",
          "operationId": "get_api_v2_task_nature_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/taskNature.get"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/projects": {
        "get": {
          "tags": [
            "Projects"
          ],
          "summary": "Get all Projects",
          "operationId": "get_api_v2_project_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/project.get"
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Projects"
          ],
          "summary": "Create a Project",
          "operationId": "post_api_v2_projects_post",
          "requestBody": {
            "description": "The new projects",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project.post"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/project.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/projects/{projectId}": {
        "get": {
          "tags": [
            "Projects"
          ],
          "summary": "Get a specific Project",
          "operationId": "get_api_v2_project_get",
          "parameters": [
            {
              "name": "projectId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/project.get"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Projects"
          ],
          "summary": "Delete a Project",
          "operationId": "delete_api_v2_projects_delete",
          "parameters": [
            {
              "name": "projectId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Accepted"
            }
          }
        },
        "patch": {
          "tags": [
            "Projects"
          ],
          "summary": "Update a Project",
          "operationId": "patch_api_v2_projects_patch",
          "parameters": [
            {
              "name": "projectId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Properties to update",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project.patch"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/project.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/projectNatures": {
        "get": {
          "tags": [
            "Projects nature"
          ],
          "summary": "Get all ProjectNatures",
          "operationId": "get_api_v2_project_nature_list",
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/projectNature.get"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/products": {
        "get": {
          "tags": [
            "Products & Services"
          ],
          "summary": "Get all Products",
          "operationId": "get_api_v2_products_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "internal_id",
              "in": "query",
              "description": "Search for the Product which internal id is the specified character string",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "product_code",
              "in": "query",
              "description": "Filters Products which product code contains the specified character string",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "with_disabled",
              "in": "query",
              "description": "Filters disabled products (true or false)",
              "schema": {
                "type": "string",
                "enum": [
                  "true",
                  "false"
                ]
              }
            },
            {
              "name": "name",
              "in": "query",
              "description": "Search for the Product which name contains the string",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/product.get"
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Products & Services"
          ],
          "summary": "Create a Product",
          "operationId": "post_api_v2_products_post",
          "requestBody": {
            "description": "The new Product.<br>Product type : 601 = Raw material purchase, 701 = Sales of finished goods, 706 = Sales of services, 707 = Sales of merchandise",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/product.post"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/product.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/products/{productId}": {
        "get": {
          "tags": [
            "Products & Services"
          ],
          "summary": "Get a specific Product",
          "operationId": "get_api_v2_products_get",
          "parameters": [
            {
              "name": "productId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/product.get"
                  }
                }
              }
            }
          }
        },
        "patch": {
          "tags": [
            "Products & Services"
          ],
          "summary": "Update a Product",
          "operationId": "patch_api_v2_products_patch",
          "parameters": [
            {
              "name": "productId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "The new Product.<br>Product type : 601 = Raw material purchase, 701 = Sales of finished goods, 706 = Sales of services, 707 = Sales of merchandise",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/product.patch"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/product.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/products/{productId}/stock": {
        "get": {
          "tags": [
            "Products & Services"
          ],
          "summary": "Get the Stock of a Product",
          "operationId": "get_api_v2_products_stock_get",
          "parameters": [
            {
              "name": "productId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/stock.get"
                  }
                }
              }
            }
          }
        },
        "patch": {
          "tags": [
            "Products & Services"
          ],
          "summary": "Update the stock of a Product",
          "operationId": "patch_api_v2_products_stock_patch",
          "parameters": [
            {
              "name": "productId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "The new Stock",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stock.patch"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/stock.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/delivery-forms": {
        "get": {
          "tags": [
            "Delivery Notes"
          ],
          "summary": "Get all Delivery Notes",
          "operationId": "get_api_v2_delivery_form_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/deliveryForm.get"
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Delivery Notes"
          ],
          "summary": "Create a Delivery Note from an Invoice",
          "operationId": "post_api_v2_delivery_form_post",
          "requestBody": {
            "description": "The new Delivery Note.<br/>Warning, the given Invoice or Quotation must be in an Order to create the Delivery Note.<br/>If you do not want to use Invoice or Quotation, products is required.",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deliveryForm.post"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/deliveryForm.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/delivery-forms/{deliveryFormId}": {
        "get": {
          "tags": [
            "Delivery Notes"
          ],
          "summary": "Get a specific Delivery Note",
          "operationId": "get_api_v2_delivery_form_get",
          "parameters": [
            {
              "name": "deliveryFormId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/deliveryForm.get"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/delivery-forms/{deliveryFormId}/download": {
        "get": {
          "tags": [
            "Delivery Notes"
          ],
          "summary": "Download a Delivery Note",
          "operationId": "get_api_v2_delivery_forms_download",
          "parameters": [
            {
              "name": "alt",
              "in": "query",
              "description": "If this parameters take the value ?alt=media, downloads the binary file instead of returning the base64",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "deliveryFormId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/tickets": {
        "get": {
          "tags": [
            "Customer Support / Tickets"
          ],
          "summary": "Get all Tickets",
          "operationId": "get_api_v2_tickets_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "company_id",
              "in": "query",
              "description": "Filters tickets by Company id",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "is_closed",
              "in": "query",
              "description": "Filters closed tickets (true or false)",
              "schema": {
                "type": "string",
                "enum": [
                  "true",
                  "false"
                ]
              }
            },
            {
              "name": "orderby",
              "in": "query",
              "description": "Order of the returned data",
              "schema": {
                "type": "string",
                "default": "id",
                "enum": [
                  "id",
                  "last_update_date"
                ]
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ticket.get"
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Customer Support / Tickets"
          ],
          "summary": "Create a Ticket",
          "operationId": "post_api_v2_tickets_post",
          "requestBody": {
            "description": "The new Ticket <br/>priority property : basse, normale, haute ou urgente",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticket.post"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ticket.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/tickets/{ticketId}": {
        "get": {
          "tags": [
            "Customer Support / Tickets"
          ],
          "summary": "Get a specific Ticket",
          "operationId": "get_api_v2_tickets_get",
          "parameters": [
            {
              "name": "ticketId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ticket.get"
                  }
                }
              }
            }
          }
        },
        "patch": {
          "tags": [
            "Customer Support / Tickets"
          ],
          "summary": "Update a Ticket",
          "operationId": "patch_api_v2_tickets_patch",
          "parameters": [
            {
              "name": "ticketId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Properties to update <br/> priority property : basse, normale, haute ou urgente",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticket.patch"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ticket.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/companies/{companyId}/events": {
        "get": {
          "tags": [
            "Events"
          ],
          "summary": "Get all Events of a Company",
          "operationId": "get_api_v2_company_event_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "companyId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/event.get"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/events/{eventId}/send": {
        "post": {
          "tags": [
            "Events"
          ],
          "summary": "Send an Event as email",
          "operationId": "post_api_v2_event_send",
          "parameters": [
            {
              "name": "eventId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          }
        }
      },
      "/api/v2/opportunities": {
        "get": {
          "tags": [
            "Opportunities"
          ],
          "summary": "Get all Opportunities",
          "operationId": "get_api_v2_opportunity_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "status",
              "in": "query",
              "description": "Filters the Opportunities status",
              "schema": {
                "type": "string",
                "default": "all",
                "enum": [
                  "ongoing",
                  "archived",
                  "all"
                ]
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/opportunity.get"
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Opportunities"
          ],
          "summary": "Create an Opportunity",
          "operationId": "post_api_v2_opportunity_post",
          "requestBody": {
            "description": "The new Opportunity",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/opportunity.post"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/opportunity.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/companies/{companyId}/opportunities": {
        "get": {
          "tags": [
            "Opportunities"
          ],
          "summary": "Get all Opportunities of a specific Company",
          "operationId": "get_api_v2_company_opportunity_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "status",
              "in": "query",
              "description": "Filters the Opportunities status",
              "schema": {
                "type": "string",
                "default": "all",
                "enum": [
                  "ongoing",
                  "archived",
                  "all"
                ]
              }
            },
            {
              "name": "companyId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/opportunity.get"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/opportunities/{opportunityId}": {
        "get": {
          "tags": [
            "Opportunities"
          ],
          "summary": "Get a specific Opportunity",
          "operationId": "get_api_v2_opportunity_get",
          "parameters": [
            {
              "name": "opportunityId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/opportunity.get"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Opportunities"
          ],
          "summary": "Delete an Opportunity",
          "operationId": "delete_api_v2_opportunity_delete",
          "parameters": [
            {
              "name": "opportunityId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          }
        },
        "patch": {
          "tags": [
            "Opportunities"
          ],
          "summary": "Update an Opportunity",
          "operationId": "patch_api_v2_opportunity_patch",
          "parameters": [
            {
              "name": "opportunityId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Properties to update",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/opportunity.patch"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/opportunity.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/opportunities/{opportunityId}/won": {
        "patch": {
          "tags": [
            "Opportunities"
          ],
          "summary": "Register an Opportunity as won",
          "operationId": "patch_api_v2_opportunity_won",
          "parameters": [
            {
              "name": "opportunityId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "If date is empty or not given, will default to now. Date must be in RFC3339 format.",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/opportunity.status"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/opportunity.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/opportunities/{opportunityId}/lost": {
        "patch": {
          "tags": [
            "Opportunities"
          ],
          "summary": "Register an Opportunity as lost",
          "operationId": "patch_api_v2_opportunity_lost",
          "parameters": [
            {
              "name": "opportunityId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "If date is empty or not given, will default to now. Date must be in RFC3339 format.",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/opportunity.status"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/opportunity.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/pipes": {
        "get": {
          "tags": [
            "Pipes"
          ],
          "summary": "Get all Opportunities Pipes",
          "operationId": "get_api_v2_pipe_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/opportunity.get"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/customfields": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "Get all Custom fields of the Axonaut account",
          "operationId": "get_api_v2_customfields_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/customfields.list"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/users": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "Get all Users of the Axonaut account",
          "operationId": "get_api_v2_user_list",
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/user.get"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/credits-history": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "Get credits history of the Axonaut account",
          "operationId": "get_api_v2_credit_history_list",
          "parameters": [
            {
              "name": "start",
              "in": "query",
              "description": "Filters by start date (after) (Format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "end",
              "in": "query",
              "description": "Filters by end date (prior) (Format DD/MM/YYYY)",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/creditHistory"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/tax-rates": {
        "get": {
          "tags": [
            "Tax rates"
          ],
          "summary": "Get all Tax Rates",
          "operationId": "get_api_v2_taxrate_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/taxRate.get"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/accounting-codes": {
        "get": {
          "tags": [
            "Accounting Codes"
          ],
          "summary": "Get all Accounting Codes",
          "operationId": "get_api_v2_accountingCode_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/accountingCode.get"
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Accounting Codes"
          ],
          "summary": "Create an AccountingCode",
          "operationId": "post_api_v2_accountingCode_post",
          "requestBody": {
            "description": "The new accounting code",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accountingCode.post"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/accountingCode.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/languages": {
        "get": {
          "tags": [
            "Languages"
          ],
          "summary": "Get all Languages",
          "operationId": "get_api_v2_language_list",
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/workforces": {
        "get": {
          "tags": [
            "Workforces"
          ],
          "summary": "Get all Workforces",
          "operationId": "get_api_v2_workforce_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/workforce.get"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/workforces/{workforceId}": {
        "get": {
          "tags": [
            "Workforces"
          ],
          "summary": "Get a specific Workforce",
          "operationId": "get_api_v2_workforce_get",
          "parameters": [
            {
              "name": "workforceId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/workforce.get"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/payslips": {
        "get": {
          "tags": [
            "Payslips"
          ],
          "summary": "Get all Payslips",
          "operationId": "get_api_v2_payslip_list",
          "parameters": [
            {
              "name": "page",
              "in": "header",
              "description": "Page number.",
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/payslip.get"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/doc.json": {
        "get": {
          "responses": {
            "default": {
              "description": ""
            }
          }
        }
      }
    },
    "components": {
      "schemas": {
        "boolean": {
          "type": "string",
          "enum": [
            true,
            false
          ]
        },
        "accountingCode.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "name": {
              "type": "string",
              "example": "Stored merchandise for resale"
            },
            "code": {
              "type": "string",
              "example": 707000
            },
            "for_purchases": {
              "type": "boolean",
              "enum": [
                true,
                false
              ]
            },
            "for_sales": {
              "type": "boolean",
              "enum": [
                true,
                false
              ]
            }
          },
          "type": "object"
        },
        "accountingCode.post": {
          "properties": {
            "name": {
              "type": "string",
              "example": "Ventes de marchandises"
            },
            "code": {
              "type": "string",
              "example": 707000
            },
            "for_purchases": {
              "$ref": "#/components/schemas/boolean"
            },
            "for_sales": {
              "$ref": "#/components/schemas/boolean"
            }
          },
          "type": "object"
        },
        "bankAccount.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 65
            },
            "name": {
              "type": "string",
              "example": "Current account"
            },
            "currency_code": {
              "type": "string",
              "example": "EUR"
            },
            "balance": {
              "type": "number",
              "format": "float",
              "example": 12345.67
            },
            "iban": {
              "type": "string"
            },
            "updated_at": {
              "type": "string",
              "example": "2023-07-12T12:34:56+00:00"
            }
          },
          "type": "object"
        },
        "bankTransaction.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 65
            },
            "bank_account_id": {
              "type": "integer",
              "example": 32
            },
            "operation_date": {
              "type": "string",
              "example": "2023-07-12"
            },
            "amount": {
              "type": "number",
              "format": "float",
              "example": 78.87
            },
            "currency_code": {
              "type": "string",
              "example": "EUR"
            },
            "description": {
              "type": "string"
            },
            "is_processed": {
              "$ref": "#/components/schemas/boolean"
            },
            "processed_date": {
              "type": "string",
              "example": "2023-07-12T12:34:56+00:00"
            },
            "created_at": {
              "type": "string",
              "example": "2023-07-12T12:34:56+00:00"
            },
            "invoices": {
              "type": "array",
              "items": {
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": 10
                  }
                },
                "type": "object"
              }
            },
            "expenses": {
              "type": "array",
              "items": {
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": 20
                  }
                },
                "type": "object"
              }
            },
            "diverse_operations": {
              "type": "array",
              "items": {
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": 30
                  }
                },
                "type": "object"
              }
            }
          },
          "type": "object"
        },
        "business.manager.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "name": {
              "type": "string",
              "example": "Claire Rousseau"
            },
            "email": {
              "type": "string",
              "example": "claire@axonaut.com"
            }
          },
          "type": "object"
        },
        "categories.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "name": {
              "type": "string",
              "example": "B2B"
            }
          },
          "type": "object"
        },
        "company.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "name": {
              "type": "string",
              "example": "foo"
            },
            "creation_date": {
              "description": "RFC3339 date like \"Y-m-d\\TH:i:sP\"",
              "type": "string",
              "example": "2022-05-31\\T18:56:22P"
            },
            "address_street": {
              "type": "string",
              "example": "5 rue de la gare"
            },
            "address_zip_code": {
              "type": "string",
              "example": 31500
            },
            "address_city": {
              "type": "string",
              "example": "Toulouse"
            },
            "address_country": {
              "type": "string",
              "example": "France"
            },
            "comments": {
              "type": "string"
            },
            "is_prospect": {
              "type": "boolean",
              "default": true,
              "enum": [
                true,
                false
              ]
            },
            "is_customer": {
              "type": "boolean",
              "default": false,
              "enum": [
                true,
                false
              ]
            },
            "currency": {
              "type": "string",
              "example": "EUR"
            },
            "language": {
              "type": "string",
              "example": "fr"
            },
            "thirdparty_code": {
              "type": "string",
              "example": 411000
            },
            "supplier_thirdparty_code": {
              "type": "string",
              "example": 401000
            },
            "intracommunity_number": {
              "type": "string",
              "example": "FR1X123456789"
            },
            "siret": {
              "type": "string",
              "example": 1234567891012
            },
            "internal_id": {
              "type": "string",
              "example": "A254-5851-486H-HEA5"
            },
            "isB2C": {
              "type": "boolean",
              "default": false,
              "enum": [
                true,
                false
              ]
            },
            "business_manager": {
              "$ref": "#/components/schemas/business.manager.get"
            },
            "custom_fields": {
              "$ref": "#/components/schemas/customfields.post"
            },
            "categories": {
              "$ref": "#/components/schemas/categories.get"
            },
            "employees": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/employee.get"
              }
            },
            "documents": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          "type": "object"
        },
        "company.minimal": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "name": {
              "type": "string",
              "example": "foo"
            }
          },
          "type": "object"
        },
        "company.patch": {
          "properties": {
            "name": {
              "type": "string",
              "example": "foo"
            },
            "address_contact_name": {
              "type": "string",
              "example": "Claire Rousseau"
            },
            "address_street": {
              "type": "string",
              "example": "5 rue de la gare"
            },
            "address_zip_code": {
              "type": "string",
              "example": 31500
            },
            "address_city": {
              "type": "string",
              "example": "Toulouse"
            },
            "address_country": {
              "type": "string",
              "example": "France"
            },
            "currency": {
              "type": "string",
              "example": "EUR"
            },
            "language": {
              "type": "string",
              "example": "fr"
            },
            "thirdparty_code": {
              "type": "string",
              "example": 411000
            },
            "intracommunity_number": {
              "type": "string",
              "example": "FR1X123456789"
            },
            "siret": {
              "type": "string",
              "example": 1234567891012
            },
            "comments": {
              "type": "string"
            },
            "custom_fields": {
              "$ref": "#/components/schemas/customfields.post"
            },
            "categories": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "B2B"
              }
            },
            "internal_id": {
              "type": "string",
              "example": "A254-5851-486H-HEA5"
            },
            "business_manager": {
              "type": "string",
              "example": "robert@mycompany.com"
            }
          },
          "type": "object"
        },
        "company.post": {
          "properties": {
            "name": {
              "type": "string",
              "example": "foo"
            },
            "address_contact_name": {
              "type": "string",
              "example": "Claire Rousseau"
            },
            "address_street": {
              "type": "string",
              "example": "5 rue de la gare"
            },
            "address_zip_code": {
              "type": "string",
              "example": 31500
            },
            "address_city": {
              "type": "string",
              "example": "Toulouse"
            },
            "address_country": {
              "type": "string",
              "example": "France"
            },
            "is_prospect": {
              "$ref": "#/components/schemas/boolean"
            },
            "is_customer": {
              "$ref": "#/components/schemas/boolean"
            },
            "isB2C": {
              "$ref": "#/components/schemas/boolean"
            },
            "employees": {
              "type": "array",
              "items": {
                "properties": {
                  "firstname": {
                    "type": "string",
                    "example": "Claire"
                  },
                  "lastname": {
                    "type": "string",
                    "example": "Rousseau"
                  },
                  "email": {
                    "type": "string",
                    "example": "claire@axonaut.com"
                  },
                  "phoneNumber": {
                    "type": "string",
                    "example": "0102030405"
                  },
                  "cellphoneNumber": {
                    "type": "string",
                    "example": "0605040302"
                  },
                  "job": {
                    "type": "string",
                    "example": "CSM"
                  },
                  "is_billing_contact": {
                    "$ref": "#/components/schemas/boolean"
                  },
                  "custom_fields": {
                    "$ref": "#/components/schemas/customfields.post"
                  }
                },
                "type": "object"
              }
            },
            "currency": {
              "type": "string",
              "example": "EUR"
            },
            "language": {
              "type": "string",
              "example": "fr"
            },
            "thirdparty_code": {
              "type": "string",
              "example": 411000
            },
            "intracommunity_number": {
              "type": "string",
              "example": "FR1X123456789"
            },
            "siret": {
              "type": "string",
              "example": 1234567891012
            },
            "comments": {
              "type": "string"
            },
            "custom_fields": {
              "$ref": "#/components/schemas/customfields.post"
            },
            "categories": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "B2B"
              }
            },
            "internal_id": {
              "type": "string",
              "example": "A254-5851-486H-HEA5"
            },
            "business_manager": {
              "type": "string",
              "example": "robert@mycompany.com"
            }
          },
          "type": "object"
        },
        "companyAddress.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "name": {
              "type": "string",
              "example": "foo"
            },
            "contact_name": {
              "type": "string",
              "example": "bar"
            },
            "company_name": {
              "type": "string",
              "example": "Axonaut"
            },
            "address_street": {
              "type": "string",
              "example": "5 rue de Paris"
            },
            "address_zip_code": {
              "type": "string",
              "example": 31500
            },
            "address_city": {
              "type": "string",
              "example": "Toulouse"
            },
            "address_country": {
              "type": "string",
              "example": "France"
            },
            "is_for_invoice": {
              "type": "boolean",
              "enum": [
                true,
                false
              ]
            },
            "is_for_delivery": {
              "type": "boolean",
              "enum": [
                true,
                false
              ]
            },
            "is_for_quotation": {
              "type": "boolean",
              "enum": [
                true,
                false
              ]
            },
            "company": {
              "$ref": "#/components/schemas/company.minimal"
            }
          },
          "type": "object"
        },
        "companyAddress.patch": {
          "properties": {
            "name": {
              "type": "string",
              "example": "foo"
            },
            "contact_name": {
              "type": "string",
              "example": "bar"
            },
            "company_name": {
              "type": "string",
              "example": "Axonaut"
            },
            "address_street": {
              "type": "string",
              "example": "5 rue de Paris"
            },
            "address_zip_code": {
              "type": "string",
              "example": 31500
            },
            "address_city": {
              "type": "string",
              "example": "Toulouse"
            },
            "address_country": {
              "type": "string",
              "example": "France"
            },
            "is_for_invoice": {
              "type": "boolean",
              "default": false,
              "enum": [
                true,
                false
              ],
              "example": false
            },
            "is_for_delivery": {
              "type": "boolean",
              "default": false,
              "enum": [
                true,
                false
              ],
              "example": false
            },
            "is_for_quotation": {
              "type": "boolean",
              "default": true,
              "enum": [
                true,
                false
              ],
              "example": true
            }
          },
          "type": "object"
        },
        "companyAddress.post": {
          "properties": {
            "name": {
              "type": "string",
              "example": "foo"
            },
            "company_id": {
              "description": "use existing company id",
              "type": "id",
              "example": 68
            },
            "contact_name": {
              "type": "string",
              "example": "bar"
            },
            "company_name": {
              "type": "string",
              "example": "Axonaut"
            },
            "address_street": {
              "type": "string",
              "example": "5 rue de Paris"
            },
            "address_zip_code": {
              "type": "string",
              "example": 31500
            },
            "address_city": {
              "type": "string",
              "example": "Toulouse"
            },
            "address_country": {
              "type": "string",
              "example": "France"
            },
            "is_for_invoice": {
              "type": "boolean",
              "default": false,
              "enum": [
                true,
                false
              ],
              "example": false
            },
            "is_for_delivery": {
              "type": "boolean",
              "default": false,
              "enum": [
                true,
                false
              ],
              "example": false
            },
            "is_for_quotation": {
              "type": "boolean",
              "default": true,
              "enum": [
                true,
                false
              ],
              "example": true
            }
          },
          "type": "object"
        },
        "companyNature.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "name": {
              "type": "string",
              "example": "B2B"
            }
          },
          "type": "object"
        },
        "companyNature.post": {
          "properties": {
            "name": {
              "type": "string",
              "example": "B2B"
            }
          },
          "type": "object"
        },
        "contract.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "start_date": {
              "type": "string",
              "example": 1653955200
            },
            "end_date": {
              "type": "string",
              "example": 1653955200
            },
            "expected_delivery_date": {
              "type": "string",
              "example": 1653955200
            },
            "last_update_date": {
              "type": "string",
              "example": 1653955200
            },
            "first_invoice_planned_date": {
              "type": "string",
              "example": 1653955200
            },
            "generate_and_send_recurring_invoices": {
              "description": "0 Do not generate and send invoices\n1 Generate and sending\n2 Generate without sending\n",
              "type": "integer",
              "enum": [
                0,
                1,
                2
              ]
            },
            "invoice_frequency_in_months": {
              "type": "integer"
            },
            "preauthorized_debit": {
              "type": "boolean"
            },
            "project": {
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 78,
                  "nullable": false
                },
                "number": {
                  "type": "string",
                  "example": "PRJ-0001",
                  "nullable": false
                },
                "name": {
                  "type": "string",
                  "example": "new website project",
                  "nullable": false
                }
              },
              "type": "object",
              "nullable": true
            },
            "quotation": {
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 28,
                  "nullable": false
                },
                "pre_tax_amount": {
                  "type": "number",
                  "format": "float",
                  "example": 578.89,
                  "nullable": false
                },
                "chapters": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "order_number": {
                        "type": "integer",
                        "example": 1
                      },
                      "text": {
                        "type": "string",
                        "example": "my first chapter"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "type": "object",
              "nullable": true
            },
            "invoices_id": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "custom_fields": {
              "$ref": "#/components/schemas/customfields.post"
            },
            "company": {
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 89,
                  "nullable": false
                },
                "name": {
                  "type": "string",
                  "example": "Customer company",
                  "nullable": false
                },
                "thirdparty_code": {
                  "type": "string",
                  "example": "411CUS007",
                  "nullable": true
                },
                "comments": {
                  "type": "string",
                  "nullable": true
                },
                "is_supplier": {
                  "type": "boolean",
                  "default": false,
                  "enum": [
                    true,
                    false
                  ],
                  "example": false
                },
                "is_prospect": {
                  "type": "boolean",
                  "default": false,
                  "enum": [
                    true,
                    false
                  ],
                  "example": false
                },
                "is_customer": {
                  "type": "boolean",
                  "default": false,
                  "enum": [
                    true,
                    false
                  ],
                  "example": false
                },
                "address_street": {
                  "type": "string",
                  "example": "Rue de Paris",
                  "nullable": true
                },
                "address_zip_code": {
                  "type": "string",
                  "example": 31300,
                  "nullable": true
                },
                "address_city": {
                  "type": "string",
                  "example": "Toulouse",
                  "nullable": true
                },
                "address_region": {
                  "type": "string",
                  "example": "Occitanie",
                  "nullable": true
                },
                "address_country": {
                  "type": "string",
                  "example": "France",
                  "nullable": true
                }
              },
              "type": "object"
            },
            "delivery_address": {
              "properties": {
                "company_name": {
                  "type": "string",
                  "example": "Customer company",
                  "nullable": true
                },
                "contact_name": {
                  "type": "string",
                  "example": "Claire Rousseau",
                  "nullable": true
                },
                "street": {
                  "type": "string",
                  "example": "Rue de Paris",
                  "nullable": true
                },
                "zip_code": {
                  "type": "string",
                  "example": 31300,
                  "nullable": true
                },
                "city": {
                  "type": "string",
                  "example": "Toulouse",
                  "nullable": true
                },
                "region": {
                  "type": "string",
                  "example": "Occitanie",
                  "nullable": true
                },
                "country": {
                  "type": "string",
                  "example": "France",
                  "nullable": true
                }
              },
              "type": "object"
            },
            "invoice_address": {
              "properties": {
                "company_name": {
                  "type": "string",
                  "example": "Customer company",
                  "nullable": true
                },
                "contact_name": {
                  "type": "string",
                  "example": "Claire Rousseau",
                  "nullable": true
                },
                "street": {
                  "type": "string",
                  "example": "Rue de Paris",
                  "nullable": true
                },
                "zip_code": {
                  "type": "string",
                  "example": 31300,
                  "nullable": true
                },
                "city": {
                  "type": "string",
                  "example": "Toulouse",
                  "nullable": true
                },
                "region": {
                  "type": "string",
                  "example": "Occitanie",
                  "nullable": true
                },
                "country": {
                  "type": "string",
                  "example": "France",
                  "nullable": true
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "contract.post": {
          "properties": {
            "company_id": {
              "type": "integer",
              "example": 33,
              "nullable": true
            },
            "name": {
              "type": "string",
              "example": "my contract"
            },
            "start_date": {
              "$ref": "#/components/schemas/date"
            },
            "end_date": {
              "$ref": "#/components/schemas/date"
            },
            "expected_delivery_date": {
              "$ref": "#/components/schemas/date"
            },
            "first_invoice_planned_date": {
              "$ref": "#/components/schemas/date"
            },
            "comments": {
              "type": "string"
            },
            "user_id": {
              "description": "If user_id is not provided, current user is used",
              "type": "integer",
              "example": 55
            },
            "generate_and_send_recurring_invoices": {
              "description": "0 Do not generate and send invoices\n1 Generate and sending\n2 Generate without sending\n",
              "type": "integer",
              "enum": [
                0,
                1,
                2
              ]
            },
            "invoice_frequency_in_months": {
              "type": "integer",
              "example": 2
            },
            "preauthorized_debit": {
              "type": "boolean",
              "default": false,
              "example": false
            },
            "products": {
              "type": "array",
              "items": {
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": 89
                  },
                  "internal_id": {
                    "type": "string",
                    "example": "XFA5855"
                  },
                  "name": {
                    "type": "string",
                    "example": "Product name"
                  },
                  "price": {
                    "type": "number",
                    "format": "float",
                    "example": 88.25
                  },
                  "tax_rate": {
                    "type": "number",
                    "format": "float",
                    "example": 5.5
                  },
                  "quantity": {
                    "type": "number",
                    "format": "float",
                    "example": 1
                  },
                  "description": {
                    "type": "string"
                  },
                  "chapter": {
                    "type": "string",
                    "example": "My chapter"
                  },
                  "discount_percent": {
                    "type": "number",
                    "format": "float",
                    "example": 12.5
                  },
                  "discount_flat": {
                    "type": "number",
                    "format": "float",
                    "example": 55.2
                  }
                },
                "type": "object"
              }
            }
          },
          "type": "object"
        },
        "creditHistory": {
          "properties": {
            "current_credits": {
              "type": "number",
              "example": 56.3
            },
            "total_credits_consumed": {
              "type": "number",
              "example": 36.3
            },
            "total_credits_added": {
              "type": "number",
              "example": 92.6
            },
            "total_euros": {
              "type": "number",
              "example": 92.6
            },
            "mouvements": {
              "type": "array",
              "items": {
                "properties": {
                  "date": {
                    "$ref": "#/components/schemas/date"
                  },
                  "credits": {
                    "type": "number",
                    "example": 36.3
                  },
                  "euros": {
                    "type": "number",
                    "example": 36.3
                  },
                  "comments": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "type": "object"
        },
        "customfields.get": {
          "properties": {
            "customFieldName": []
          },
          "type": "object",
          "example": {
            "myCustomField": 1
          }
        },
        "customfields.list": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 89
            },
            "entity": {
              "type": "string",
              "example": "product"
            },
            "name": {
              "type": "string",
              "example": "preferred color"
            },
            "input_type": {
              "type": "string",
              "example": "text"
            },
            "choices": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "Choice 1"
              }
            }
          },
          "type": "object"
        },
        "customfields.post": {
          "properties": {
            "customFieldName": []
          },
          "type": "object",
          "example": {
            "myCustomField": 1
          }
        },
        "date": {
          "description": "ISO8601 formated date :  <br />\nYear MUST use 4 digits format <br />\nMonth MUST use leading zeros <br />\nDay MUST use leading zeros<br />\nHour MUST use 24-hour format of an hour with leading zeros<br />\nMinutes MUST use leading zeros<br />\nSeconds MUST use leading zeros<br />\n",
          "type": "string",
          "example": "2022-05-28T18:05:35+02:00"
        },
        "deliveryForm.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "delivery_form_date": {
              "$ref": "#/components/schemas/date"
            },
            "title": {
              "type": "string",
              "example": "my delivery"
            },
            "file_name": {
              "type": "string",
              "example": "delivery_note_mycompany"
            },
            "comment": {
              "type": "string",
              "example": "string"
            },
            "address": {
              "type": "array",
              "items": {
                "properties": {
                  "delivery_address_company_name": {
                    "type": "string",
                    "example": "mycompany"
                  },
                  "delivery_address_street": {
                    "type": "string",
                    "example": "1 rue de la gare"
                  },
                  "delivery_address_town": {
                    "type": "string",
                    "example": "Toulouse"
                  },
                  "delivery_address_zip_code": {
                    "type": "string",
                    "example": "31000"
                  },
                  "delivery_address_country": {
                    "type": "string",
                    "example": "France"
                  }
                },
                "type": "object"
              }
            },
            "products": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/product.get"
              }
            },
            "company_id": {
              "type": "integer",
              "example": 25
            },
            "contract_id": {
              "type": "integer",
              "example": 48
            },
            "invoice_id": {
              "type": "integer",
              "example": 289
            },
            "project_id": {
              "type": "integer",
              "example": 13
            }
          },
          "type": "object"
        },
        "deliveryForm.post": {
          "properties": {
            "invoice_id": {
              "type": "integer",
              "example": 289
            },
            "quotation_id": {
              "type": "integer",
              "example": 84
            },
            "contract_id": {
              "type": "integer",
              "example": 48
            },
            "title": {
              "type": "string",
              "example": "my delivery"
            },
            "comments": {
              "type": "string"
            },
            "products": {
              "type": "array",
              "items": {
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": 62
                  },
                  "internal_id": {
                    "type": "string",
                    "example": "REF#32186"
                  },
                  "product_code": {
                    "type": "string",
                    "example": "DAC-456"
                  },
                  "name": {
                    "type": "string",
                    "example": "foo"
                  },
                  "quantity": {
                    "type": "number",
                    "example": 52.9
                  }
                },
                "type": "object"
              }
            }
          },
          "type": "object"
        },
        "diverseOperation.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "title": {
              "type": "string",
              "example": "Diverse operation title"
            },
            "operation_date": {
              "$ref": "#/components/schemas/date"
            },
            "amount": {
              "type": "number",
              "example": 50
            },
            "left_to_pay": {
              "type": "number",
              "example": 50
            },
            "accounting_code": {
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 55
                },
                "code": {
                  "type": "string",
                  "example": "12345",
                  "nullable": true
                },
                "name": {
                  "type": "string",
                  "example": "Administratif"
                }
              },
              "type": "object"
            },
            "paid_date": {
              "$ref": "#/components/schemas/date"
            }
          },
          "type": "object"
        },
        "document.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "company_id": {
              "type": "integer",
              "example": 33
            },
            "name": {
              "type": "string",
              "example": "Contrat.pdf"
            },
            "external_url": {
              "type": "string",
              "example": "https://mywebsite.com/documents/contract.pdf"
            },
            "customer_portal_url": {
              "type": "string",
              "example": "https://axonaut.com/documents/EA5489DX"
            },
            "creation_date": {
              "$ref": "#/components/schemas/date"
            },
            "send_date": {
              "$ref": "#/components/schemas/date"
            },
            "date_customer_answer": {
              "$ref": "#/components/schemas/date"
            },
            "electronic_signature_date": {
              "$ref": "#/components/schemas/date"
            }
          },
          "type": "object"
        },
        "document.patch": {
          "properties": {
            "name": {
              "type": "string",
              "example": "Contrat.pdf"
            },
            "external_url": {
              "type": "string",
              "example": "https://mywebsite.com/documents/contract.pdf"
            }
          },
          "type": "object"
        },
        "document.post": {
          "properties": {
            "company_id": {
              "type": "integer",
              "example": 33
            },
            "name": {
              "type": "string",
              "example": "Contrat.pdf"
            },
            "external_url": {
              "type": "string",
              "example": "https://mywebsite.com/documents/contract.pdf"
            }
          },
          "type": "object"
        },
        "employee.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "gender": {
              "$ref": "#/components/schemas/gender.property"
            },
            "firstname": {
              "type": "string",
              "example": "Claire"
            },
            "lastname": {
              "type": "string",
              "example": "Rousseau"
            },
            "email": {
              "type": "string",
              "example": "claire@axonaut.com"
            },
            "phone_number": {
              "type": "string",
              "example": "0102030405"
            },
            "cellphone_number": {
              "type": "string",
              "example": "0605040302"
            },
            "job": {
              "type": "string",
              "example": "CEO"
            },
            "is_billing_contact": {
              "type": "boolean",
              "enum": [
                true,
                false
              ]
            },
            "company_id": {
              "type": "integer",
              "example": 33
            },
            "custom_fields": {
              "$ref": "#/components/schemas/customfields.post"
            }
          },
          "type": "object"
        },
        "employee.patch": {
          "properties": {
            "gender": {
              "$ref": "#/components/schemas/gender.property"
            },
            "firstname": {
              "type": "string",
              "example": "Claire"
            },
            "lastname": {
              "type": "string",
              "example": "Rousseau"
            },
            "email": {
              "type": "string",
              "example": "claire@axonaut.com"
            },
            "phone_number": {
              "type": "string",
              "example": "0102030405"
            },
            "cellphone_number": {
              "type": "string",
              "example": "0605040302"
            },
            "custom_fields": {
              "$ref": "#/components/schemas/customfields.post"
            }
          },
          "type": "object"
        },
        "employee.post": {
          "properties": {
            "company_id": {
              "type": "integer",
              "example": 33
            },
            "gender": {
              "$ref": "#/components/schemas/gender.property"
            },
            "firstname": {
              "type": "string",
              "example": "Claire"
            },
            "lastname": {
              "type": "string",
              "example": "Rousseau"
            },
            "email": {
              "type": "string",
              "example": "claire@axonaut.com"
            },
            "phone_number": {
              "type": "string",
              "example": "0102030405"
            },
            "cellphone_number": {
              "type": "string",
              "example": "0605040302"
            },
            "is_billing_contact": {
              "type": "boolean",
              "default": false,
              "enum": [
                true,
                false
              ],
              "example": false
            },
            "custom_fields": {
              "$ref": "#/components/schemas/customfields.post"
            }
          },
          "type": "object"
        },
        "event.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "company_id": {
              "type": "integer",
              "example": 33
            },
            "title": {
              "type": "string",
              "example": "Meet with Clair"
            },
            "date": {
              "$ref": "#/components/schemas/date"
            },
            "timestamp": {
              "type": "integer",
              "example": 4165198152
            },
            "duration": {
              "description": "duration in minutes",
              "type": "integer",
              "example": 58
            },
            "content": {
              "type": "string"
            },
            "nature": {
              "type": "string",
              "example": "meeting"
            },
            "flow": {
              "description": "1 for IN <br />\n2 for OUT\n",
              "type": "integer",
              "example": 1
            },
            "is_done": {
              "$ref": "#/components/schemas/boolean"
            },
            "opportunity_id": {
              "type": "integer",
              "example": 10
            },
            "users": {
              "type": "array",
              "items": {
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": 23
                  },
                  "email": {
                    "type": "string",
                    "example": "claire.rousseau@axonaut.com"
                  },
                  "fullname": {
                    "type": "string",
                    "example": "Claire Rousseau"
                  }
                },
                "type": "object"
              }
            },
            "employees": {
              "type": "array",
              "items": {
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": 23
                  },
                  "email": {
                    "type": "string",
                    "example": "claire.rousseau@axonaut.com"
                  },
                  "fullname": {
                    "type": "string",
                    "example": "Claire Rousseau"
                  }
                },
                "type": "object"
              }
            },
            "attachments": {
              "properties": {
                "invoices": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "id": {
                        "type": "integer",
                        "example": 23
                      },
                      "number": {
                        "type": "string",
                        "example": 202212623
                      }
                    },
                    "type": "object"
                  }
                },
                "quotations": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "id": {
                        "type": "integer",
                        "example": 23
                      },
                      "number": {
                        "type": "string",
                        "example": 202212623
                      }
                    },
                    "type": "object"
                  }
                },
                "documents": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "id": {
                        "type": "integer",
                        "example": 23
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "event.post": {
          "properties": {
            "company_id": {
              "type": "integer",
              "example": 33
            },
            "employee_email": {
              "type": "string",
              "example": "claire.rousseau@axonaut.com"
            },
            "date": {
              "$ref": "#/components/schemas/date"
            },
            "content": {
              "type": "string"
            },
            "nature": {
              "description": "1 = Meeting <br />\n2 = Email <br />\n3 = Phone Call <br />\n4 = Mail <br />\n5 = Text Message <br />\n6 = Note <br />\n",
              "type": "integer",
              "example": 1
            },
            "title": {
              "type": "string",
              "example": "Meet with Tom"
            },
            "duration": {
              "description": "duration in minutes",
              "type": "integer",
              "example": 58
            },
            "is_done": {
              "$ref": "#/components/schemas/boolean"
            },
            "opportunity_id": {
              "type": "integer",
              "example": 10
            },
            "users": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "claire.rousseau@axonaut.com"
              }
            },
            "attachments": {
              "properties": {
                "invoices_ids": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "example": 96
                  }
                },
                "quotations_ids": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "example": 96
                  }
                },
                "documents_ids": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "example": 96
                  }
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "expense.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "title": {
              "type": "string",
              "example": "expense name"
            },
            "date": {
              "$ref": "#/components/schemas/date"
            },
            "number": {
              "type": "string",
              "example": "expense name"
            },
            "creation_date": {
              "$ref": "#/components/schemas/date"
            },
            "last_update_date": {
              "$ref": "#/components/schemas/date"
            },
            "paid_date": {
              "$ref": "#/components/schemas/date"
            },
            "expected_payment_date": {
              "$ref": "#/components/schemas/date"
            },
            "pre_tax_amount": {
              "type": "number",
              "example": 50
            },
            "tax_amount": {
              "type": "number",
              "example": 50
            },
            "total_amount": {
              "type": "number",
              "example": 50
            },
            "left_to_pay": {
              "type": "number",
              "example": 50
            },
            "currency": {
              "type": "string",
              "example": "EUR"
            },
            "accounting_code": {
              "type": "string",
              "example": "7015C"
            },
            "accounting_code_name": {
              "type": "string",
              "example": "code name"
            },
            "supplier_contract_id": {
              "type": "integer",
              "example": 55
            },
            "supplier_id": {
              "type": "integer",
              "example": 55
            },
            "supplier_name": {
              "type": "string",
              "example": "My supplier"
            },
            "company_id": {
              "type": "integer",
              "example": 123
            },
            "project_id": {
              "type": "integer",
              "example": 1
            },
            "workforce_id": {
              "type": "integer",
              "example": 55
            },
            "payslip_id": {
              "type": "integer",
              "example": 3
            },
            "public_path": {
              "type": "string",
              "example": "https://axonaut.com/public/expense/f45sdf5qs5"
            },
            "expense_lines": {
              "type": "array",
              "items": {
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "line name"
                  },
                  "quantity": {
                    "type": "number",
                    "example": 2
                  },
                  "total_pre_tax_amount": {
                    "type": "number",
                    "example": 50
                  },
                  "accounting_code": {
                    "type": "string",
                    "example": "7015D"
                  },
                  "product_id": {
                    "type": "integer",
                    "example": 15
                  }
                },
                "type": "object"
              }
            },
            "tax_rates": {
              "type": "array",
              "items": {
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": 55
                  },
                  "name": {
                    "type": "string",
                    "example": "20.0%"
                  },
                  "tax_rate": {
                    "type": "number",
                    "example": 20
                  },
                  "accounting_code": {
                    "type": "string",
                    "example": 44571
                  },
                  "amount": {
                    "type": "number",
                    "example": 10
                  }
                },
                "type": "object"
              }
            }
          },
          "type": "object"
        },
        "expense.post": {
          "properties": {
            "supplier_id": {
              "type": "integer",
              "example": 55
            },
            "workforce_id": {
              "type": "integer",
              "example": 55
            },
            "supplier_thirdparty_code": {
              "type": "string",
              "example": "7015C"
            },
            "title": {
              "type": "string",
              "example": "expense name"
            },
            "project_id": {
              "type": "integer",
              "example": 1
            },
            "date": {
              "$ref": "#/components/schemas/date"
            },
            "pre_tax_amount": {
              "type": "number",
              "example": 50
            },
            "taxes": {
              "type": "array",
              "items": {
                "properties": {
                  "tax_rate": {
                    "type": "number",
                    "example": 20
                  },
                  "accounting_code": {
                    "type": "string",
                    "example": 44571
                  },
                  "amount": {
                    "type": "number",
                    "example": 10
                  }
                },
                "type": "object"
              }
            }
          },
          "type": "object"
        },
        "expensePayment.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "amount": {
              "type": "number",
              "example": 50.5
            },
            "date": {
              "type": "string",
              "example": "2022-10-25"
            },
            "reference": {
              "type": "string",
              "example": "DKZD54D5A"
            },
            "expense_id": {
              "type": "integer",
              "example": 55
            }
          },
          "type": "object"
        },
        "expensePayment.post": {
          "properties": {
            "expense_id": {
              "type": "integer",
              "example": 55
            },
            "nature": {
              "type": "integer",
              "enum": [
                "1: Debit",
                "2: Transfer",
                "3: Check",
                "4: Credit card",
                "5: Cash",
                "6: Other"
              ],
              "example": 5
            },
            "amount": {
              "type": "number",
              "example": 20
            },
            "date_ts": {
              "type": "integer",
              "example": 85126548465
            },
            "reference": {
              "type": "string",
              "example": "KTR451"
            }
          },
          "type": "object"
        },
        "gender.property": {
          "description": "1 for Men\n2 for Women\n",
          "type": "integer",
          "enum": [
            1,
            2
          ]
        },
        "invoice.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "number": {
              "type": "string",
              "example": "FAC2022-08-00001"
            },
            "date": {
              "type": "string",
              "example": 1653955200
            },
            "sent_date": {
              "type": "string",
              "example": 1653955200
            },
            "due_date": {
              "type": "string",
              "example": 1653955200
            },
            "paid_date": {
              "type": "string",
              "example": 1653955200
            },
            "delivery_date": {
              "type": "string",
              "example": 1653955200
            },
            "last_update_date": {
              "type": "string",
              "example": 1653955200
            },
            "tax_amount": {
              "type": "number",
              "format": "float",
              "example": 55.02
            },
            "total": {
              "type": "number",
              "format": "float",
              "example": 552
            },
            "deposits": {
              "properties": {
                "deposit_percent": {
                  "type": "number",
                  "format": "float",
                  "example": 50,
                  "nullable": true
                },
                "deposit_flat": {
                  "type": "number",
                  "format": "float",
                  "example": 250,
                  "nullable": true
                }
              },
              "type": "object"
            },
            "discounts": {
              "properties": {
                "amount": {
                  "type": "number",
                  "format": "float",
                  "example": 50,
                  "nullable": true
                },
                "amount_with_tax": {
                  "type": "number",
                  "format": "float",
                  "example": 52,
                  "nullable": true
                },
                "comments": {
                  "type": "string",
                  "example": "commercial gesture",
                  "nullable": true
                }
              },
              "type": "object"
            },
            "taxes": {
              "type": "array",
              "items": {
                "properties": {
                  "rate": {
                    "type": "number",
                    "format": "float",
                    "example": 5.5,
                    "nullable": false
                  },
                  "amount": {
                    "type": "number",
                    "format": "float",
                    "example": 105.25,
                    "nullable": false
                  }
                },
                "type": "object"
              }
            },
            "currency": {
              "type": "string",
              "example": "EUR"
            },
            "margin": {
              "type": "number",
              "format": "float",
              "nullable": true
            },
            "mandatory_mentions": {
              "type": "string",
              "nullable": true
            },
            "payment_terms": {
              "type": "string",
              "nullable": true
            },
            "theme_id": {
              "type": "integer",
              "example": 1020
            },
            "outstanding_amount": {
              "type": "number",
              "format": "float",
              "nullable": true
            },
            "frequency_in_months": {
              "type": "integer",
              "nullable": true
            },
            "business_user": {
              "type": "string",
              "example": "Claire Rousseau",
              "nullable": true
            },
            "public_path": {
              "type": "string",
              "example": "https://axonaut.com/public/invoice/pdf/XDJC51321",
              "nullable": true
            },
            "paid_invoice_pdf": {
              "type": "string",
              "example": "https://axonaut.com/utilities/invoice/paidDownload/XDJC51321",
              "nullable": true
            },
            "customer_portal_url": {
              "type": "string",
              "example": "https://axonaut.com/document/XDJC51321",
              "nullable": true
            },
            "contract_id": {
              "type": "integer",
              "example": 995,
              "nullable": true
            },
            "project_id": {
              "type": "integer",
              "example": 995,
              "nullable": true
            },
            "invoice_lines": {
              "type": "array",
              "items": {
                "properties": {
                  "product_id": {
                    "type": "integer",
                    "example": 78,
                    "nullable": false
                  },
                  "product_name": {
                    "type": "string",
                    "example": "Fancy socket",
                    "nullable": false
                  },
                  "product_code": {
                    "type": "string",
                    "example": "FSOC",
                    "nullable": true
                  },
                  "name": {
                    "type": "string",
                    "example": "Fancy socket for nice shoes",
                    "nullable": false
                  },
                  "price": {
                    "type": "number",
                    "format": "float",
                    "example": 55.4,
                    "nullable": false
                  },
                  "quantity": {
                    "type": "number",
                    "format": "float",
                    "example": 8,
                    "nullable": false
                  },
                  "unit": {
                    "type": "string",
                    "example": "pair",
                    "nullable": false
                  },
                  "details": {
                    "type": "string",
                    "nullable": false
                  },
                  "total_pre_tax_amount": {
                    "type": "number",
                    "format": "float",
                    "example": 105.25,
                    "nullable": false
                  },
                  "total_tax_amount": {
                    "type": "number",
                    "format": "float",
                    "example": 10.25,
                    "nullable": false
                  },
                  "total_amount": {
                    "type": "number",
                    "format": "float",
                    "example": 115.5,
                    "nullable": false
                  },
                  "chapter": {
                    "type": "string",
                    "example": "First chapter",
                    "nullable": false
                  },
                  "accounting_code": {
                    "type": "string",
                    "example": "601CL005",
                    "nullable": true
                  },
                  "unit_job_costing": {
                    "type": "string",
                    "example": 15,
                    "nullable": false
                  },
                  "taxes": {
                    "type": "array",
                    "items": {
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": 123456,
                          "nullable": false
                        },
                        "rate": {
                          "type": "number",
                          "format": "float",
                          "example": 20,
                          "nullable": false
                        },
                        "name": {
                          "type": "string",
                          "example": "Standard rate",
                          "nullable": false
                        },
                        "accounting_code": {
                          "type": "string",
                          "example": 44571
                        }
                      },
                      "type": "object"
                    }
                  },
                  "discounts": {
                    "type": "array",
                    "items": {
                      "properties": {
                        "amount": {
                          "type": "number",
                          "format": "float",
                          "example": 55,
                          "nullable": false
                        },
                        "amount_with_tax": {
                          "type": "number",
                          "format": "float",
                          "example": 60.5,
                          "nullable": false
                        }
                      },
                      "type": "object"
                    }
                  }
                },
                "type": "object"
              }
            },
            "company": {
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 89,
                  "nullable": false
                },
                "name": {
                  "type": "string",
                  "example": "Customer company",
                  "nullable": false
                },
                "is_supplier": {
                  "type": "boolean",
                  "default": false,
                  "enum": [
                    true,
                    false
                  ],
                  "example": false
                },
                "is_prospect": {
                  "type": "boolean",
                  "default": false,
                  "enum": [
                    true,
                    false
                  ],
                  "example": false
                },
                "is_customer": {
                  "type": "boolean",
                  "default": false,
                  "enum": [
                    true,
                    false
                  ],
                  "example": false
                }
              },
              "type": "object"
            },
            "billing_address": {
              "properties": {
                "company_name": {
                  "type": "string",
                  "example": "Customer company",
                  "nullable": true
                },
                "contact_name": {
                  "type": "string",
                  "example": "Claire Rousseau",
                  "nullable": true
                },
                "zip_code": {
                  "type": "string",
                  "example": 31300,
                  "nullable": true
                },
                "city": {
                  "type": "string",
                  "example": "Toulouse",
                  "nullable": true
                },
                "region": {
                  "type": "string",
                  "example": "Occitanie",
                  "nullable": true
                },
                "country": {
                  "type": "string",
                  "example": "France",
                  "nullable": true
                }
              },
              "type": "object"
            },
            "delivery_address": {
              "properties": {
                "company_name": {
                  "type": "string",
                  "example": "Customer company",
                  "nullable": true
                },
                "contact_name": {
                  "type": "string",
                  "example": "Claire Rousseau",
                  "nullable": true
                },
                "zip_code": {
                  "type": "string",
                  "example": 31300,
                  "nullable": true
                },
                "city": {
                  "type": "string",
                  "example": "Toulouse",
                  "nullable": true
                },
                "region": {
                  "type": "string",
                  "example": "Occitanie",
                  "nullable": true
                },
                "country": {
                  "type": "string",
                  "example": "France",
                  "nullable": true
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "invoice.post": {
          "properties": {
            "company_id": {
              "type": "integer",
              "example": 3,
              "nullable": true
            },
            "employee_email": {
              "type": "string",
              "example": "claire.Rousseau@axonaut.com"
            },
            "company_address_id": {
              "type": "integer",
              "example": 30,
              "nullable": true
            },
            "contract_id": {
              "type": "integer",
              "example": 28
            },
            "date": {
              "$ref": "#/components/schemas/date"
            },
            "due_date": {
              "$ref": "#/components/schemas/date"
            },
            "service_start_date": {
              "$ref": "#/components/schemas/date"
            },
            "service_end_date": {
              "$ref": "#/components/schemas/date"
            },
            "business_manager": {
              "type": "string",
              "example": "johndoe@email.com",
              "nullable": true
            },
            "order_number": {
              "type": "string"
            },
            "global_discount_flat": {
              "type": "number",
              "format": "float",
              "example": 895.47
            },
            "global_discount_percent": {
              "type": "number",
              "format": "float",
              "example": 28.47
            },
            "global_discount_comments": {
              "type": "string"
            },
            "mandatory_mentions": {
              "type": "string"
            },
            "payment_terms": {
              "type": "string"
            },
            "theme_id": {
              "type": "integer",
              "example": 74
            },
            "allow_gocardless_payment": {
              "type": "boolean",
              "default": false,
              "enum": [
                true,
                false
              ],
              "example": false
            },
            "allow_stripe_payment": {
              "type": "boolean",
              "default": false,
              "enum": [
                true,
                false
              ],
              "example": false
            },
            "products": {
              "type": "array",
              "items": {
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": 89
                  },
                  "internal_id": {
                    "type": "string"
                  },
                  "product_code": {
                    "type": "string",
                    "example": "PR-001-544"
                  },
                  "name": {
                    "type": "string",
                    "example": "Product name"
                  },
                  "price": {
                    "type": "number",
                    "format": "float",
                    "example": 88.25
                  },
                  "tax_rate": {
                    "type": "number",
                    "format": "float",
                    "example": 5.5
                  },
                  "quantity": {
                    "type": "number",
                    "format": "float",
                    "example": 1
                  },
                  "unit": {
                    "type": "string",
                    "example": "kg"
                  },
                  "description": {
                    "type": "string"
                  },
                  "chapter": {
                    "type": "string"
                  },
                  "discount_percent": {
                    "type": "number",
                    "format": "float",
                    "example": 12.5
                  },
                  "discount_flat": {
                    "type": "number",
                    "format": "float",
                    "example": 55.2
                  },
                  "unit_job_costing": {
                    "type": "number",
                    "format": "float",
                    "example": 10.96
                  }
                },
                "type": "object"
              }
            },
            "delivery_address": {
              "properties": {
                "company_name": {
                  "type": "string",
                  "example": "Customer company",
                  "nullable": true
                },
                "contact_name": {
                  "type": "string",
                  "example": "Claire Rousseau",
                  "nullable": true
                },
                "street": {
                  "type": "string",
                  "example": "10 Rue de la République",
                  "nullable": true
                },
                "zip_code": {
                  "type": "string",
                  "example": 31300,
                  "nullable": true
                },
                "city": {
                  "type": "string",
                  "example": "Toulouse",
                  "nullable": true
                },
                "region": {
                  "type": "string",
                  "example": "Occitanie",
                  "nullable": true
                },
                "country": {
                  "type": "string",
                  "example": "France",
                  "nullable": true
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "invoicePayment.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 65
            },
            "invoice_id": {
              "type": "integer",
              "example": 55
            },
            "amount": {
              "type": "number",
              "format": "float",
              "example": 78.87
            },
            "date": {
              "type": "string",
              "example": "2022-08-28"
            },
            "reference": {
              "type": "string",
              "example": "Prlv 12345 F6789"
            },
            "nature": {
              "type": "string",
              "example": "Prélèvement"
            }
          },
          "type": "object"
        },
        "invoicePayment.post": {
          "properties": {
            "invoice_id": {
              "type": "integer",
              "example": 55
            },
            "nature": {
              "type": "integer",
              "enum": [
                "1: Debit",
                "2: Transfer",
                "3: Check",
                "4: Credit card",
                "5: Cash",
                "6: Other"
              ],
              "example": 5
            },
            "amount": {
              "type": "number",
              "format": "float",
              "example": 78.87
            },
            "reference": {
              "type": "string",
              "example": "DKZD54D5A"
            },
            "date": {
              "$ref": "#/components/schemas/date"
            }
          },
          "type": "object"
        },
        "opportunity.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "name": {
              "type": "string",
              "example": "foo"
            },
            "comments": {
              "type": "string"
            },
            "amount": {
              "type": "number",
              "example": 26.3
            },
            "probability": {
              "type": "number",
              "example": 30.3
            },
            "due_date": {
              "type": "string",
              "example": 1666742400
            },
            "end_date": {
              "type": "string",
              "example": 1666742400
            },
            "is_win": {
              "$ref": "#/components/schemas/boolean"
            },
            "is_archived": {
              "$ref": "#/components/schemas/boolean"
            },
            "user_name": {
              "type": "string",
              "example": "Claire Rousseau"
            },
            "pipe_name": {
              "type": "string",
              "example": "Mailing process"
            },
            "pipe_step_name": {
              "type": "string",
              "example": "send quotation"
            },
            "custom_fields": {
              "$ref": "#/components/schemas/customfields.get"
            },
            "company": {
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 56
                },
                "name": {
                  "type": "integer",
                  "example": 56
                },
                "is_supplier": {
                  "$ref": "#/components/schemas/boolean"
                },
                "is_prospect": {
                  "$ref": "#/components/schemas/boolean"
                },
                "is_customer": {
                  "$ref": "#/components/schemas/boolean"
                }
              },
              "type": "object"
            },
            "employees": {
              "type": "array",
              "items": {
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": 98
                  },
                  "name": {
                    "type": "string",
                    "example": "Claire Rousseau"
                  },
                  "email": {
                    "type": "string",
                    "example": "claire.rousseau@axonaut.com"
                  },
                  "phone_number": {
                    "type": "string",
                    "example": "01 02 03 04 05"
                  },
                  "cellphone_number": {
                    "type": "string",
                    "example": "01 02 03 04 05"
                  }
                },
                "type": "object"
              }
            }
          },
          "type": "object"
        },
        "opportunity.patch": {
          "properties": {
            "amount": {
              "type": "number",
              "example": 48.6
            },
            "probability": {
              "type": "number",
              "example": 95.6
            },
            "name": {
              "type": "string",
              "example": "foo"
            },
            "comments": {
              "type": "string"
            },
            "pipe_step_name": {
              "type": "string",
              "example": "send quotation"
            },
            "due_date_ts": {
              "type": "integer",
              "example": 5489512156
            },
            "business_manager_email": {
              "type": "string",
              "example": "bob@mycompany.com"
            }
          },
          "type": "object"
        },
        "opportunity.post": {
          "properties": {
            "company_id": {
              "type": "integer",
              "example": 98
            },
            "amount": {
              "type": "number",
              "example": 48.6
            },
            "probability": {
              "type": "number",
              "example": 95.6
            },
            "name": {
              "type": "string",
              "example": "foo"
            },
            "comments": {
              "type": "string"
            },
            "pipe_name": {
              "type": "string",
              "example": "Mailing process"
            },
            "pipe_step_name": {
              "type": "string",
              "example": "send quotation"
            },
            "due_date_ts": {
              "type": "integer",
              "example": 5489512156
            },
            "pipe_step_date_ts": {
              "type": "integer",
              "example": 5489512156
            },
            "employees": {
              "type": "array",
              "items": {
                "properties": {
                  "employee_firstname": {
                    "type": "string",
                    "example": "Clair"
                  },
                  "employee_lastname": {
                    "type": "string",
                    "example": "Rousseau"
                  },
                  "employee_email": {
                    "type": "string",
                    "example": "claire.rousseau@axonaut.com"
                  },
                  "employee_phone": {
                    "type": "string",
                    "example": "01.02.03.04.05"
                  },
                  "employee_cellphone": {
                    "type": "string",
                    "example": "01.02.03.04.05"
                  }
                },
                "type": "object"
              }
            },
            "business_manager_email": {
              "type": "string",
              "example": "bob@mycompany.com"
            },
            "custom_fields": {
              "$ref": "#/components/schemas/customfields.get"
            }
          },
          "type": "object"
        },
        "opportunity.status": {
          "properties": {
            "date": {
              "$ref": "#/components/schemas/date"
            }
          },
          "type": "object"
        },
        "payslip.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "workforce_id": {
              "type": "integer",
              "example": 41
            },
            "date": {
              "$ref": "#/components/schemas/date"
            },
            "start_date": {
              "$ref": "#/components/schemas/date"
            },
            "end_date": {
              "$ref": "#/components/schemas/date"
            },
            "net_salary": {
              "type": "number",
              "format": "float",
              "example": 1600.33
            },
            "total_cost": {
              "type": "number",
              "format": "float",
              "example": 1800.5
            },
            "total_hours": {
              "type": "number",
              "format": "float",
              "example": 154
            }
          },
          "type": "object"
        },
        "pipe.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "name": {
              "type": "string",
              "example": "Mailing process"
            },
            "pipe_steps": {
              "type": "array",
              "items": {
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "send quotation"
                  },
                  "order_number": {
                    "type": "integer",
                    "example": 4
                  }
                },
                "type": "object"
              }
            }
          },
          "type": "object"
        },
        "product.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "name": {
              "type": "string",
              "example": "foo"
            },
            "product_code": {
              "type": "string",
              "example": "P001"
            },
            "description": {
              "type": "string"
            },
            "price": {
              "type": "number",
              "example": 26.3
            },
            "price_with_tax": {
              "type": "number",
              "example": 30.3
            },
            "tax_rate": {
              "type": "number",
              "example": 5.5
            },
            "type": {
              "type": "string",
              "example": "Goods"
            },
            "category": {
              "type": "string",
              "example": "Foo"
            },
            "job_costing": {
              "type": "number",
              "example": 9.6
            },
            "location": {
              "type": "string",
              "example": "2nd floor"
            },
            "unit": {
              "type": "string",
              "example": "kg"
            },
            "disabled": {
              "$ref": "#/components/schemas/boolean"
            },
            "internal_id": {
              "type": "string",
              "example": "REF#6654"
            },
            "stock": {
              "type": "number",
              "example": 5.6
            },
            "weighted_average_cost": {
              "type": "number",
              "example": 26.3
            },
            "custom_fields": {
              "$ref": "#/components/schemas/customfields.get"
            }
          },
          "type": "object"
        },
        "product.patch": {
          "properties": {
            "name": {
              "type": "string",
              "example": "foo"
            },
            "description": {
              "type": "string"
            },
            "product_code": {
              "type": "string",
              "example": "589-6"
            },
            "internal_id": {
              "type": "string",
              "example": "A254-5851-486H-HEA5"
            },
            "supplier_product_code": {
              "type": "string",
              "example": "BZE-89"
            },
            "location": {
              "type": "string",
              "example": "first floor"
            },
            "unit": {
              "type": "string",
              "example": "kg"
            },
            "product_type": {
              "type": "integer",
              "example": 601
            },
            "price": {
              "type": "number",
              "example": 59.6
            },
            "tax_rate": {
              "type": "number",
              "example": 5.5
            },
            "job_costing": {
              "type": "number",
              "example": 2.6
            },
            "category": {
              "type": "string",
              "example": "foo"
            },
            "disabled": {
              "$ref": "#/components/schemas/boolean"
            },
            "custom_fields": {
              "$ref": "#/components/schemas/customfields.get"
            }
          },
          "type": "object"
        },
        "product.post": {
          "properties": {
            "name": {
              "type": "string",
              "example": "foo"
            },
            "price": {
              "type": "number",
              "example": 59.6
            },
            "tax_rate": {
              "type": "number",
              "example": 5.5
            },
            "description": {
              "type": "string"
            },
            "internal_id": {
              "type": "string",
              "example": "REF#594"
            },
            "product_code": {
              "type": "string",
              "example": "589-6"
            },
            "supplier_product_code": {
              "type": "string",
              "example": "BZE-89"
            },
            "job_costing": {
              "type": "number",
              "example": 2.6
            },
            "location": {
              "type": "string",
              "example": "first floor"
            },
            "unit": {
              "type": "string",
              "example": "kg"
            },
            "product_type": {
              "type": "integer",
              "example": 601
            },
            "category": {
              "type": "string",
              "example": "foo"
            },
            "stock": {
              "type": "number",
              "example": 5.3
            },
            "custom_fields": {
              "$ref": "#/components/schemas/customfields.get"
            }
          },
          "type": "object"
        },
        "project.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "name": {
              "type": "string",
              "example": "foo"
            },
            "number": {
              "type": "string",
              "example": "P001"
            },
            "company_id": {
              "type": "integer",
              "example": 45
            },
            "comments": {
              "type": "string"
            },
            "estimated_hours": {
              "type": "number",
              "example": 89.4
            },
            "estimated_cost": {
              "type": "number",
              "example": 78.5
            },
            "estimated_revenue": {
              "type": "number",
              "example": 100.5
            },
            "actual_hours": {
              "type": "number",
              "example": 28.5
            },
            "actual_expenses_cost": {
              "type": "number",
              "example": 65.5
            },
            "actual_timetrackings_cost": {
              "type": "number",
              "example": 78.5
            },
            "actual_consume_products_cost": {
              "type": "number",
              "example": 12.5
            },
            "actual_revenue": {
              "type": "number",
              "example": 49.3
            },
            "estimated_start": {
              "type": "string",
              "example": "2022-10-28"
            },
            "actual_start": {
              "type": "string",
              "example": "2022-10-30"
            },
            "estimated_end": {
              "type": "string",
              "example": "2023-10-28"
            },
            "actual_end": {
              "type": "string",
              "example": "2023-10-30"
            },
            "project_nature": {
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 65
                },
                "name": {
                  "type": "string",
                  "example": "bar"
                }
              },
              "type": "object"
            },
            "workforces": {
              "type": "array",
              "items": {
                "properties": {
                  "fullname": {
                    "type": "string",
                    "example": "Claire Rousseau"
                  },
                  "idUser": {
                    "type": "integer",
                    "example": 47
                  }
                },
                "type": "object"
              }
            },
            "statuses": {
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 56
                },
                "name": {
                  "type": "string",
                  "example": "open"
                },
                "date": {
                  "$ref": "#/components/schemas/date"
                }
              },
              "type": "object"
            },
            "parent_project": {
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 74
                },
                "name": {
                  "type": "string",
                  "example": "parent"
                }
              },
              "type": "object"
            },
            "son_projects": {
              "type": "array",
              "items": {
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": 36
                  },
                  "name": {
                    "type": "string",
                    "example": "son"
                  }
                },
                "type": "object"
              }
            },
            "custom_fields": {
              "$ref": "#/components/schemas/customfields.get"
            }
          },
          "type": "object"
        },
        "project.patch": {
          "properties": {
            "name": {
              "type": "string",
              "example": "foo"
            },
            "number": {
              "type": "string",
              "example": "P001"
            },
            "comments": {
              "type": "string"
            },
            "company_id": {
              "type": "integer",
              "example": 45
            },
            "estimated_start_ts": {
              "type": "integer",
              "example": 4895123
            },
            "estimated_end_ts": {
              "type": "integer",
              "example": 98524855
            },
            "expected_workload_hours": {
              "type": "number",
              "example": 100.5
            },
            "expected_cost": {
              "type": "number",
              "example": 28.5
            },
            "expected_revenue": {
              "type": "number",
              "example": 65.5
            },
            "custom_fields": {
              "$ref": "#/components/schemas/customfields.get"
            }
          },
          "type": "object"
        },
        "project.post": {
          "properties": {
            "name": {
              "type": "string",
              "example": "foo"
            },
            "number": {
              "type": "string",
              "example": "P001"
            },
            "comments": {
              "type": "string"
            },
            "workforces_ids": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "company_id": {
              "type": "integer",
              "example": 45
            },
            "parent_project_id": {
              "type": "integer",
              "example": 12
            },
            "estimated_start_ts": {
              "type": "integer",
              "example": 4895123
            },
            "estimated_end_ts": {
              "type": "integer",
              "example": 98524855
            },
            "expected_workload_hours": {
              "type": "number",
              "example": 100.5
            },
            "expected_cost": {
              "type": "number",
              "example": 28.5
            },
            "expected_revenue": {
              "type": "number",
              "example": 65.5
            },
            "custom_fields": {
              "$ref": "#/components/schemas/customfields.get"
            }
          },
          "type": "object"
        },
        "projectNature.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "name": {
              "type": "string",
              "example": "foo"
            },
            "isDisabled": {
              "$ref": "#/components/schemas/boolean"
            }
          },
          "type": "object"
        },
        "quotation.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "number": {
              "type": "string",
              "example": "QUO-2022-02"
            },
            "title": {
              "type": "string",
              "example": "QUO-2022-02 Title"
            },
            "date": {
              "$ref": "#/components/schemas/date"
            },
            "expiry_date": {
              "$ref": "#/components/schemas/date"
            },
            "sent_date": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/date"
                }
              ],
              "nullable": true
            },
            "last_update_date": {
              "$ref": "#/components/schemas/date"
            },
            "status": {
              "type": "string",
              "enum": [
                "accepted",
                "refused",
                "pending"
              ]
            },
            "date_customer_answer": {
              "$ref": "#/components/schemas/date"
            },
            "user_id": {
              "type": "integer",
              "example": 58962
            },
            "company_id": {
              "type": "integer",
              "example": 58962
            },
            "company_name": {
              "type": "string",
              "example": "My customer"
            },
            "project_id": {
              "type": "integer",
              "example": 9842,
              "nullable": true
            },
            "contract_id": {
              "type": "integer",
              "example": 69874,
              "nullable": true
            },
            "global_discount_amount": {
              "type": "number",
              "format": "float",
              "example": 489.6
            },
            "global_discount_amount_with_tax": {
              "type": "number",
              "format": "float",
              "example": 589.6
            },
            "global_discount_unit_is_percent": {
              "$ref": "#/components/schemas/boolean"
            },
            "pre_tax_amount": {
              "type": "number",
              "format": "float",
              "example": 5896.1
            },
            "tax_amount": {
              "type": "number",
              "format": "float",
              "example": 569
            },
            "total_amount": {
              "type": "number",
              "format": "float",
              "example": 6465.1
            },
            "margin": {
              "type": "number",
              "format": "float",
              "example": 256.45
            },
            "payments_to_display_in_pdf": {
              "type": "array",
              "items": {
                "properties": {
                  "amount": {
                    "type": "number",
                    "format": "float",
                    "example": 10.5
                  },
                  "payment_nature_id": {
                    "type": "integer",
                    "example": 3
                  },
                  "payment_nature_name": {
                    "type": "string"
                  },
                  "reference": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "electronic_signature_date": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/date"
                }
              ],
              "nullable": true
            },
            "global_discount_comments": {
              "type": "string",
              "nullable": true
            },
            "public_path": {
              "type": "string",
              "example": "https://axonaut.com/public/quotation/pdf/5eac5b8de0aac1225598e5c2a5b906f3f177a208136bb985723de032cc10bc30"
            },
            "customer_portal_url": {
              "type": "string",
              "example": "https://axonaut.com/document/9DTW7ZBP28AMV296"
            },
            "quotation_lines": {
              "type": "array",
              "items": {
                "properties": {
                  "product_id": {
                    "type": "integer",
                    "example": 489,
                    "nullable": false
                  },
                  "product_internal_id": {
                    "type": "string",
                    "example": "FZR48-4545A-515SA",
                    "nullable": true
                  },
                  "product_code": {
                    "type": "string",
                    "example": "PRT-12-896",
                    "nullable": true
                  },
                  "product_name": {
                    "type": "string",
                    "example": "My Product",
                    "nullable": false
                  },
                  "title": {
                    "type": "string",
                    "example": "quotation line",
                    "nullable": false
                  },
                  "details": {
                    "type": "string",
                    "example": "line details",
                    "nullable": true
                  },
                  "quantity": {
                    "type": "number",
                    "format": "float",
                    "example": 2,
                    "nullable": true
                  },
                  "unit": {
                    "type": "string",
                    "example": "KG",
                    "nullable": true
                  },
                  "price": {
                    "type": "number",
                    "format": "float",
                    "example": 4482,
                    "nullable": true
                  },
                  "tax_rates": {
                    "type": "array",
                    "items": {
                      "properties": {
                        "rate": {
                          "type": "number",
                          "format": "float",
                          "example": 5.5,
                          "nullable": false
                        },
                        "name": {
                          "type": "string",
                          "example": "5.5%",
                          "nullable": false
                        }
                      },
                      "type": "object"
                    }
                  },
                  "chapter": {
                    "type": "string",
                    "example": "product and services",
                    "nullable": true
                  },
                  "line_discount_amount": {
                    "type": "number",
                    "format": "float",
                    "example": 120.2,
                    "nullable": true
                  },
                  "line_discount_amount_with_tax": {
                    "type": "number",
                    "format": "float",
                    "example": 155.5,
                    "nullable": true
                  },
                  "line_discount_unit_is_percent": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/boolean"
                      }
                    ],
                    "nullable": true
                  },
                  "tax_amount": {
                    "type": "number",
                    "format": "float",
                    "example": 55.5,
                    "nullable": true
                  },
                  "pre_tax_amount": {
                    "type": "number",
                    "format": "float",
                    "example": 789.5,
                    "nullable": true
                  },
                  "total_amount": {
                    "type": "number",
                    "format": "float",
                    "example": 845,
                    "nullable": true
                  },
                  "margin": {
                    "type": "number",
                    "format": "float",
                    "example": 55,
                    "nullable": true
                  },
                  "unit_job_costing": {
                    "type": "number",
                    "format": "float",
                    "example": 23.2,
                    "nullable": true
                  }
                },
                "type": "object"
              }
            }
          },
          "type": "object"
        },
        "quotation.post": {
          "properties": {
            "company_id": {
              "type": "integer",
              "example": 33,
              "nullable": true
            },
            "company_address_id": {
              "type": "integer",
              "example": 63,
              "nullable": true
            },
            "business_manager": {
              "type": "string",
              "example": "johndoe@email.com",
              "nullable": true
            },
            "project_id": {
              "type": "integer",
              "example": 43,
              "nullable": true
            },
            "opportunity_id": {
              "type": "integer",
              "example": 123,
              "nullable": true
            },
            "theme_id": {
              "type": "integer",
              "example": 53,
              "nullable": true
            },
            "online_payment": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/boolean"
                }
              ],
              "nullable": true
            },
            "comments": {
              "type": "string",
              "nullable": true
            },
            "date": {
              "$ref": "#/components/schemas/date"
            },
            "expiry_date": {
              "$ref": "#/components/schemas/date"
            },
            "products": {
              "type": "array",
              "items": {
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": 73,
                    "nullable": true
                  },
                  "internal_id": {
                    "type": "string",
                    "example": "FZR48-4545A-515SA",
                    "nullable": true
                  },
                  "product_code": {
                    "type": "string",
                    "example": "PRT-12-896",
                    "nullable": true
                  },
                  "name": {
                    "type": "string",
                    "example": "My Product",
                    "nullable": true
                  },
                  "price": {
                    "type": "number",
                    "format": "float",
                    "example": 55.99,
                    "nullable": true
                  },
                  "tax_rate": {
                    "type": "number",
                    "format": "float",
                    "example": 5.5,
                    "nullable": true
                  },
                  "quantity": {
                    "type": "number",
                    "format": "float",
                    "example": 2.5,
                    "nullable": true
                  },
                  "unit": {
                    "type": "string",
                    "example": "KG",
                    "nullable": true
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  },
                  "unit_job_costing": {
                    "type": "number",
                    "format": "float",
                    "example": 23.2,
                    "nullable": true
                  },
                  "chapter": {
                    "type": "string",
                    "example": "product and services",
                    "nullable": true
                  },
                  "discount_percent": {
                    "type": "number",
                    "format": "float",
                    "example": 12.2,
                    "nullable": true
                  },
                  "discount_flat": {
                    "type": "number",
                    "format": "float",
                    "example": 32.5,
                    "nullable": true
                  }
                },
                "type": "object"
              }
            }
          },
          "type": "object"
        },
        "stock.get": {
          "properties": {
            "product_id": {
              "type": "integer",
              "example": 55
            },
            "current_stock": {
              "type": "number",
              "example": 23.6
            },
            "weighted_average_cost": {
              "type": "number",
              "example": 3.6
            },
            "raw_material": {
              "type": "array",
              "items": {
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "foo"
                  },
                  "stock": {
                    "type": "number",
                    "example": 2.3
                  },
                  "quantity_needed": {
                    "type": "number",
                    "example": 3.2
                  }
                },
                "type": "object"
              }
            },
            "product": {
              "type": "array",
              "items": {
                "properties": {
                  "internal_id": {
                    "type": "string",
                    "example": "REF#6654"
                  },
                  "product_code": {
                    "type": "string",
                    "example": "P001"
                  }
                },
                "type": "object"
              }
            }
          },
          "type": "object"
        },
        "stock.patch": {
          "properties": {
            "stock": {
              "type": "number",
              "example": 2.3
            },
            "update_reason": {
              "type": "string",
              "example": "inventory"
            }
          },
          "type": "object"
        },
        "supplier.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "company_id": {
              "type": "integer",
              "example": 55
            },
            "name": {
              "type": "string",
              "example": "foo"
            },
            "prefered_tax_rate": {
              "type": "string",
              "example": "20%"
            },
            "thirdparty_code": {
              "type": "string",
              "example": 401000
            },
            "custom_fields": {
              "$ref": "#/components/schemas/customfields.get"
            },
            "categories": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "B2B"
              }
            }
          },
          "type": "object"
        },
        "supplier.minimal": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "company_id": {
              "type": "integer",
              "example": 55
            },
            "name": {
              "type": "string",
              "example": "foo"
            }
          },
          "type": "object"
        },
        "supplier.post": {
          "properties": {
            "name": {
              "type": "string",
              "example": "foo"
            },
            "address_contact_name": {
              "type": "string",
              "example": "Claire Rousseau"
            },
            "address_street": {
              "type": "string",
              "example": "5 rue de la gare"
            },
            "address_zip_code": {
              "type": "string",
              "example": 31500
            },
            "address_city": {
              "type": "string",
              "example": "Toulouse"
            },
            "address_country": {
              "type": "string",
              "example": "France"
            },
            "intracommunity_number": {
              "type": "string",
              "example": "1X123456789"
            },
            "siret": {
              "type": "string",
              "example": 1234567891012
            },
            "comments": {
              "type": "string"
            },
            "custom_fields": {
              "$ref": "#/components/schemas/customfields.post"
            },
            "categories": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "B2B"
              }
            }
          },
          "type": "object"
        },
        "supplierContract.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "title": {
              "type": "string",
              "example": "foo"
            },
            "supplier": {
              "$ref": "#/components/schemas/supplier.get"
            },
            "start_date": {
              "$ref": "#/components/schemas/date"
            },
            "end_date": {
              "$ref": "#/components/schemas/date"
            },
            "frequency_in_months": {
              "type": "integer",
              "example": 1
            },
            "comments": {
              "type": "string"
            },
            "pre_tax_amount": {
              "type": "number",
              "example": 55.5
            },
            "total_amount": {
              "type": "number",
              "example": 65.5
            },
            "expenses": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/expense.get"
              }
            }
          },
          "type": "object"
        },
        "supplierContract.post": {
          "properties": {
            "title": {
              "type": "string",
              "example": "foo"
            },
            "supplier_id": {
              "type": "integer",
              "example": 1
            },
            "start_date": {
              "$ref": "#/components/schemas/date"
            },
            "end_date": {
              "$ref": "#/components/schemas/date"
            },
            "frequency_in_months": {
              "type": "integer",
              "example": 1
            },
            "comments": {
              "type": "string"
            },
            "expenses": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/expense.post"
              }
            }
          },
          "type": "object"
        },
        "supplierDelivery.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "supplier": {
              "$ref": "#/components/schemas/supplier.get"
            },
            "expense_id": {
              "type": "integer",
              "example": 25
            },
            "supplier_delivery_receipts": {
              "type": "array",
              "items": {
                "properties": {
                  "receipt_id": {
                    "type": "integer",
                    "example": 9
                  },
                  "receipt_date": {
                    "$ref": "#/components/schemas/date"
                  },
                  "received_products": {
                    "type": "array",
                    "items": {
                      "properties": {
                        "product_id": {
                          "type": "integer",
                          "example": 5
                        },
                        "quantity_received": {
                          "type": "number",
                          "example": 50
                        }
                      },
                      "type": "object"
                    }
                  }
                },
                "type": "object"
              }
            },
            "products_remaining_to_receive": {
              "type": "array",
              "items": {
                "properties": {
                  "product_id": {
                    "type": "integer",
                    "example": 5
                  },
                  "remaining_quantity": {
                    "type": "number",
                    "example": 50
                  }
                },
                "type": "object"
              }
            },
            "order_date": {
              "$ref": "#/components/schemas/date"
            },
            "expected_delivery_date": {
              "$ref": "#/components/schemas/date"
            },
            "actual_delivery_date": {
              "$ref": "#/components/schemas/date"
            }
          },
          "type": "object"
        },
        "supplierDelivery.post": {
          "properties": {
            "receipt_date": {
              "$ref": "#/components/schemas/date"
            },
            "products": {
              "type": "array",
              "items": {
                "properties": {
                  "product_id": {
                    "type": "integer",
                    "example": 5
                  },
                  "quantity": {
                    "type": "number",
                    "example": 2
                  }
                },
                "type": "object"
              }
            }
          },
          "type": "object"
        },
        "task.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "number": {
              "type": "string",
              "example": "T001"
            },
            "title": {
              "type": "string",
              "example": "create something"
            },
            "description": {
              "type": "string"
            },
            "priority": {
              "type": "string",
              "example": "normale"
            },
            "type": {
              "type": "string",
              "example": "Installation"
            },
            "creation_date": {
              "$ref": "#/components/schemas/date"
            },
            "start_date": {
              "$ref": "#/components/schemas/date"
            },
            "estimated_end_date": {
              "$ref": "#/components/schemas/date"
            },
            "end_date": {
              "$ref": "#/components/schemas/date"
            },
            "estimated_workload": {
              "type": "number",
              "example": 55.5
            },
            "tracked_workload": {
              "type": "number",
              "example": 58.5
            },
            "project_id": {
              "type": "integer",
              "example": 15
            },
            "company_id": {
              "type": "integer",
              "example": 18
            },
            "user_author_id": {
              "type": "integer",
              "example": 14
            },
            "task_status_id": {
              "type": "integer",
              "example": 16
            },
            "task_status_name": {
              "type": "integer",
              "example": 10
            },
            "workforces": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/workforce.minimal"
              }
            }
          },
          "type": "object"
        },
        "task.post": {
          "properties": {
            "title": {
              "type": "string",
              "example": "do something"
            },
            "description": {
              "type": "string"
            },
            "priority": {
              "type": "integer",
              "example": "haute"
            },
            "estimated_workload": {
              "type": "number",
              "example": 55.5
            },
            "task_nature_id": {
              "type": "integer",
              "example": 95
            },
            "company_id": {
              "type": "integer",
              "example": 89
            },
            "project_id": {
              "type": "integer",
              "example": 45
            },
            "start_date": {
              "type": "string",
              "example": "25/04/2023"
            },
            "end_date": {
              "type": "string",
              "example": "25/04/2023"
            },
            "estimated_end_date": {
              "type": "string",
              "example": "25/04/2023"
            },
            "workforces_id": {
              "type": "array",
              "items": {
                "type": "integer",
                "example": 96
              }
            }
          },
          "type": "object"
        },
        "taskNature.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "name": {
              "type": "string",
              "example": "Setup"
            },
            "backgroundColor": {
              "type": "string",
              "example": "#ff00ff"
            }
          },
          "type": "object"
        },
        "taxRate.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "name": {
              "type": "string",
              "example": "TVA 8.5%"
            },
            "rate": {
              "type": "number",
              "format": "float",
              "example": 8.5
            },
            "for_sales": {
              "type": "boolean",
              "enum": [
                true,
                false
              ]
            },
            "for_purchases": {
              "type": "boolean",
              "enum": [
                true,
                false
              ]
            },
            "accounting_code_collected": {
              "type": "string",
              "example": 44571
            },
            "accounting_code_deductible": {
              "type": "integer",
              "example": 4456
            },
            "is_expenses_intracommunity_tax_rate": {
              "type": "boolean",
              "enum": [
                true,
                false
              ]
            }
          },
          "type": "object"
        },
        "themes.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "name": {
              "type": "string",
              "example": "B2B themes"
            },
            "payment_terms": {
              "type": "string"
            },
            "mandatory_mentions": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "ticket.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "title": {
              "type": "string",
              "example": "something happened"
            },
            "reference": {
              "type": "string",
              "example": "T001"
            },
            "status": {
              "type": "string",
              "example": "open"
            },
            "priority": {
              "type": "string"
            },
            "creation_date": {
              "$ref": "#/components/schemas/date"
            },
            "last_update_date": {
              "$ref": "#/components/schemas/date"
            },
            "is_closed": {
              "$ref": "#/components/schemas/boolean"
            },
            "company_id": {
              "type": "integer",
              "example": 41
            },
            "workforce_id": {
              "type": "integer",
              "example": 41
            },
            "comments": {
              "type": "array",
              "items": {
                "properties": {
                  "date": {
                    "$ref": "#/components/schemas/date"
                  },
                  "author": {
                    "type": "string",
                    "example": "Claire Rousseau"
                  },
                  "text": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "employees": {
              "type": "array",
              "items": {
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": 68
                  },
                  "name": {
                    "type": "string",
                    "example": "Claire Rousseau"
                  },
                  "phone_number": {
                    "type": "string",
                    "example": "01.02.03.04.05"
                  },
                  "cellphone_number": {
                    "type": "string",
                    "example": "01 02 03 04 05"
                  }
                },
                "type": "object"
              }
            },
            "other_recipients": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "james.bond@mycompany.com"
              }
            },
            "custom_fields": {
              "$ref": "#/components/schemas/customfields.get"
            }
          },
          "type": "object"
        },
        "ticket.patch": {
          "properties": {
            "title": {
              "type": "string",
              "example": "do something"
            },
            "priority": {
              "type": "string",
              "example": "haute"
            },
            "company_id": {
              "type": "integer",
              "example": 89
            },
            "project_id": {
              "type": "integer",
              "example": 45
            },
            "workforces_id": {
              "type": "integer",
              "example": 36
            },
            "is_closed": {
              "$ref": "#/components/schemas/boolean"
            }
          },
          "type": "object"
        },
        "ticket.post": {
          "properties": {
            "title": {
              "type": "string",
              "example": "do something"
            },
            "description": {
              "type": "string"
            },
            "priority": {
              "type": "string",
              "example": "haute"
            },
            "company_id": {
              "type": "integer",
              "example": 89
            },
            "employees_ids": {
              "type": "array",
              "items": {
                "type": "integer",
                "example": 96
              }
            },
            "project_id": {
              "type": "integer",
              "example": 45
            },
            "workforce_id": {
              "type": "integer",
              "example": 36
            },
            "custom_fields": {
              "$ref": "#/components/schemas/customfields.post"
            }
          },
          "type": "object"
        },
        "timetracking.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "task_id": {
              "type": "integer",
              "example": 86
            },
            "ticket_id": {
              "type": "integer",
              "example": 75
            },
            "project_id": {
              "type": "integer",
              "example": 23
            },
            "comment": {
              "type": "string"
            },
            "startDate": {
              "type": "string",
              "example": "2022-05-28 18:05:35"
            },
            "endDate": {
              "type": "string",
              "example": "2022-05-28 18:05:35"
            },
            "hours": {
              "type": "number",
              "example": 5.2
            },
            "workforces": {
              "$ref": "#/components/schemas/workforce.timetracking"
            }
          },
          "type": "object"
        },
        "timetracking.post": {
          "properties": {
            "workforce_id": {
              "type": "integer",
              "example": 85
            },
            "project_id": {
              "type": "integer",
              "example": 78
            },
            "task_id": {
              "type": "integer",
              "example": 15
            },
            "ticket_id": {
              "type": "integer",
              "example": 69
            },
            "weekDate": {
              "type": "integer",
              "example": 69
            },
            "startDate": {
              "type": "string",
              "example": "28/05/2022 12:05:35"
            },
            "endDate": {
              "type": "string",
              "example": "28/05/2022 12:05:35"
            },
            "hours": {
              "type": "number",
              "example": 45.4
            },
            "comment": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "user.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "email": {
              "type": "string",
              "example": "claire.rousseau@axonaut.com"
            },
            "fullname": {
              "type": "string",
              "example": "Claire Rousseau"
            },
            "firstname": {
              "type": "string",
              "example": "Claire"
            },
            "lastname": {
              "type": "string",
              "example": "Rousseau"
            },
            "phone_number": {
              "type": "string",
              "example": "01 02 03 04 05"
            },
            "cellphone_number": {
              "type": "string",
              "example": "01 02 03 04 05"
            },
            "company_natures": {
              "type": "string",
              "example": "nature 1, nature 2"
            },
            "roles": {
              "type": "string",
              "example": "Commercial ; Comptable"
            }
          },
          "type": "object"
        },
        "workforce.get": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "firstname": {
              "type": "string",
              "example": "claire"
            },
            "lastname": {
              "type": "string",
              "example": "Rousseau"
            },
            "email": {
              "type": "string",
              "example": "claire.rousseau@axonaut.com"
            },
            "gender": {
              "type": "string",
              "enum": [
                "Homme",
                "Femme"
              ]
            },
            "birth": {
              "type": "string",
              "example": 630547200
            },
            "address_street": {
              "type": "string",
              "example": "9 rue de la république"
            },
            "address_zip_code": {
              "type": "string",
              "example": 31500
            },
            "address_city": {
              "type": "string",
              "example": "Toulouse"
            },
            "job": {
              "type": "string",
              "example": "Développeur"
            },
            "phone": {
              "type": "string",
              "example": "01 02 03 04 05"
            },
            "entry_date": {
              "type": "string",
              "example": 1579046400
            },
            "exit_date": {
              "type": "string",
              "example": 1642204800
            },
            "thirdparty_code": {
              "type": "string",
              "example": "401THIRDPARTYCODE"
            },
            "payslips": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/payslip.get"
              }
            }
          },
          "type": "object"
        },
        "workforce.minimal": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "firstname": {
              "type": "string",
              "example": "clair"
            },
            "lastname": {
              "type": "string",
              "example": "Rousseau"
            },
            "email": {
              "type": "string",
              "example": "claire.rousseau@axonaut.com"
            }
          },
          "type": "object"
        },
        "workforce.timetracking": {
          "properties": {
            "id": {
              "type": "integer",
              "example": 55
            },
            "firstname": {
              "type": "string",
              "example": "claire"
            },
            "lastname": {
              "type": "string",
              "example": "rousseau"
            }
          },
          "type": "object"
        }
      },
      "securitySchemes": {
        "userApiKey": {
          "type": "apiKey",
          "name": "userApiKey",
          "in": "header"
        }
      }
    },
    "security": [
      {
        "userApiKey": []
      }
    ]
  }
}